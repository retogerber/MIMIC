import re
import sys
import csv
import os
import glob
import pandas as pd
import numpy as np
from snakemake.utils import validate

# working directory
workdir: "."
workdir_path = "."


# config file name
configfile: "config/config.yaml"


include: "rules/common.smk"
include: "Snakefile_microscopy"
include: "Snakefile_IMC"
include: "Snakefile_IMS"
include: "Snakefile_QC"
include: "Snakefile_overlap"



### Start of workflow.
sample_metadata_df = read_sample_metadata(config["sample_metadata"])
validate(sample_metadata_df, "sample_metadata.schema.yaml")

project_names = sample_metadata_df["project_name"].tolist()
sample_names = sample_metadata_df["sample_name"].tolist()

# check if directory structure exists
for project in project_names:
    if not os.path.isdir(os.path.join(workdir_path, "results", project)):
        tmpdir = os.path.join(workdir_path, "results", project)
        sys.exit(
            f"Project directory {tmpdir} does not exist! Create them with 'bash workflow/scripts/setup_project_results_directory.sh -p PROJECT_NAME'"
        )

unique_project_names = list(set(project_names))

preIMS_location_files_complete = []
for pr in unique_project_names:
    preIMS_location_files = os.listdir(f"results/{pr}/data/preIMS_location")
    preIMS_location_files = [
        re.findall(f"{pr}_reg_mask_on_preIMS_*.geojson", s)
        for s in preIMS_location_files
    ]
    preIMS_location_files = [
        f"results/{pr}/data/preIMS_location/{s[0]}" for s in preIMS_location_files if s
    ]
    preIMS_location_files_complete += preIMS_location_files


# print("unique project_names:")
# print(unique_project_names)

imzml_filenames = sample_metadata_df["imzml_filename"].tolist()
imzml_project = [
    f"{imzml_filenames[i]}:{project_names[i]}" for i in range(len(imzml_filenames))
]
unique_imzml_project = list(set(imzml_project))
unique_imzml_project = [ip.split(":") for ip in unique_imzml_project]
unique_imzml_project = [
    [e[0] for e in unique_imzml_project],
    [e[1] for e in unique_imzml_project],
]
unique_imzml_project[0] = [os.path.splitext(e)[0] for e in unique_imzml_project[0]]

stages = config["stages"]

def return_output_files(wildcards):
    files = []
    if "IMS" in stages or "all" in stages:
        files +=  expand(
            "results/{project_name}/data/IMS/{imzml_base}_peaks.h5",
            zip,
            project_name=unique_imzml_project[1],
            imzml_base=unique_imzml_project[0],
        )
        files +=  expand(
            "results/{project_name}/data/IMS/{imzml_base}_{project_name}_IMS.ome.tiff",
            zip,
            project_name=unique_imzml_project[1],
            imzml_base=unique_imzml_project[0],
        )
    if "regIMS" in stages or "all" in stages:
        files += [choose_imsml_coordsfile_base(sample_names[i], project_names[i]) for i in range(len(sample_names))]

    if "regIMC" in stages or "all" in stages:
        core_names = [
            get_column_entry_from_metadata_two_conditions(
                sample_names[i],
                project_names[i],
                'core_name',
                'sample_name',
                'project_name',
                read_sample_metadata(config['sample_metadata']))
            for i in range(len(sample_names))
        ]
        files += expand(
            "results/{project_name}/data/IMC_location/{project_name}_registered_IMC_mask_on_postIMC_{core}.geojson",
            zip,
            project_name=project_names,
            core=core_names,
        )
    if "Microscopy" in stages or "all" in stages:
        files += expand(
            "results/{project_name}/data/postIMC/{sample}_transformed_on_postIMS.ome.tiff",
            zip,
            project_name=project_names,
            sample=sample_names,
        )
    if "overlap" in stages or "all" in stages:
        files += expand(
            "results/{project_name}/data/cell_overlap/{project_name}_{imzml_base}_peak_cell_overlap.csv",
            zip,
            project_name=unique_imzml_project[1],
            imzml_base=unique_imzml_project[0],
        )
    if "QC" in stages or "all" in stages:
        files += expand(
            "results/{project_name}/data/registration_metric/report/{project_name}_registration_evaluation.html",
            project_name=project_names,
        )
        files += expand(
            "results/{project_name}/data/IMS/{project_name}_{sample}_IMS_transformed.ome.tiff",
            zip,
            project_name=project_names,
            sample=sample_names,
        )
    return files


rule all:
    input:
        return_output_files,

