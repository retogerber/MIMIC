import re
import sys
import csv
import os
import glob
import pandas as pd
import numpy as np

# working directory
workdir: "."
workdir_path="."

# config file name
configfile: "config/config.yaml"


### Start of workflow.

if os.path.isfile("config/sample_metadata.csv"):
    with open('config/sample_metadata.csv', 'r') as fil:
        sample_metadata_df = pd.read_csv(fil)
        print(sample_metadata_df)
else:
    sys.exit("File config/sample_metadata.csv not found!")

project_names=sample_metadata_df["project_name"].tolist()
sample_names=sample_metadata_df["sample_name"].tolist()

# check if directory structure exists
for project in project_names:
    if not os.path.isdir(os.path.join(workdir_path,"results",project)):
        sys.exit("Project directory "+os.path.join(workdir_path,"results",project)+"does not exist! Create them with 'bash workflow/scripts/setup_project_results_directory.sh -p PROJECT_NAME'")

unique_project_names = list(set(project_names))

preIMS_location_files_complete = []
for pr in unique_project_names:
    preIMS_location_files = os.listdir(f'results/{pr}/data/preIMS_location')
    preIMS_location_files = [ re.findall(f'{pr}_reg_mask_on_preIMS_*.geojson', s) for s in preIMS_location_files ]
    preIMS_location_files = [f'results/{pr}/data/preIMS_location/{s[0]}' for s in preIMS_location_files if s]
    preIMS_location_files_complete+=preIMS_location_files


print("unique project_names:")
print(unique_project_names)

imzml_filenames=sample_metadata_df["imzml_filename"].tolist()
imzml_project = [imzml_filenames[i]+":"+project_names[i] for i in range(len(imzml_filenames))]
unique_imzml_project = list(set(imzml_project))
unique_imzml_project = [ ip.split(":") for ip in unique_imzml_project]
unique_imzml_project = [[ e[0] for e in unique_imzml_project ],[ e[1] for e in unique_imzml_project ]]
unique_imzml_project[0] = [ os.path.splitext(e)[0] for e in unique_imzml_project[0] ]

#image_types=["postIMS","preIMS","HE","postIMC","preIMC"]
image_types=["postIMS","preIMS","postIMC","preIMC"]

rule all:
    input:
        #expand("results/{project_name}/data/{image_type}/{project_name}_{image_type}.ome.tiff", project_name=project_names, image_type=image_types),
        #expand("results/{project_name}/data/IMC/{sample}_aggr_transformed.ome.tiff",project_name=project_names,sample=sample_names),
        expand("results/{project_name}/data/cell_overlap/{project_name}_{sample}_cell_overlap_IMS.csv",zip,project_name=project_names, sample=sample_names),
        expand("results/{project_name}/data/cell_overlap/{project_name}_{sample}_cell_centroids.csv",zip,project_name=project_names, sample=sample_names),
        #expand("results/{project_name}/data/IMS/{project_name}_IMS_peaks.h5",project_name=unique_project_names)
        expand("results/{project_name}/data/IMS/{imzml_base}_peaks.h5",zip,project_name=unique_imzml_project[1], imzml_base=unique_imzml_project[0])



rule prepare_register_postIMC_to_postIMS:
    params:
        microscopy_pixelsize=config["microscopy_pixel_size"],
    threads: 1
    input:
        template_file="config/template_postIMC_to_postIMS-wsireg-config.yaml",
        postIMS="results/{project_name}/data/postIMS/{project_name}_postIMS.ome.tiff",
        preIMS="results/{project_name}/data/preIMS/{project_name}_preIMS.ome.tiff",
        preIMC="results/{project_name}/data/preIMC/{project_name}_preIMC.ome.tiff",
        postIMC="results/{project_name}/data/postIMC/{project_name}_postIMC.ome.tiff"
    output:
        wsireg_config="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-wsireg-config.yaml"
    shell:
        "workflow/scripts/prepare_postIMC_to_postIMS_wsireg_config.sh -p {wildcards.project_name} -a {input.postIMS} -b {input.preIMS} -c {input.preIMC} -d {input.postIMC} -s {params.microscopy_pixelsize} -t {input.template_file} -o results/{wildcards.project_name}/registrations/postIMC_to_postIMS"
 
rule register_postIMC_to_postIMS:
    threads: 32
    input:
        postIMS="results/{project_name}/data/postIMS/{project_name}_postIMS.ome.tiff",
        preIMS="results/{project_name}/data/preIMS/{project_name}_preIMS.ome.tiff",
        preIMC="results/{project_name}/data/preIMC/{project_name}_preIMC.ome.tiff",
        postIMC="results/{project_name}/data/postIMC/{project_name}_postIMC.ome.tiff",
        wsireg_config="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-wsireg-config.yaml"
    output:
        preIMS_to_postIMS_transform="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-preIMS_to_postIMS_transformations.json",
        preIMS_to_postIMS_image="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-preIMS_to_postIMS_registered.ome.tiff",
        preIMC_to_postIMS_transform="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-preIMC_to_postIMS_transformations.json",
        preIMC_to_postIMS_image="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-preIMC_to_postIMS_registered.ome.tiff",
        postIMC_to_postIMS_transform="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-postIMC_to_postIMS_transformations.json",
        postIMC_to_postIMS_image="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-postIMC_to_postIMS_registered.ome.tiff",
        imcache_dir=directory("results/{project_name}/registrations/postIMC_to_postIMS/.imcache_{project_name}"),
        logfile="results/{project_name}/registrations/postIMC_to_postIMS/log.txt"
    conda:
        "env/image_registration_wsireg.yaml"
    shell:
        "wsireg2d {input.wsireg_config} > {output.logfile} 2>&1"

rule postprocess_register_postIMC_to_postIMS:
    threads: 1
    input:
        preIMS_to_postIMS_image="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-preIMS_to_postIMS_registered.ome.tiff",
        preIMC_to_postIMS_image="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-preIMC_to_postIMS_registered.ome.tiff",
        postIMC_to_postIMS_image="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-postIMC_to_postIMS_registered.ome.tiff"
    output:
        preIMS_image="results/{project_name}/data/preIMS/{project_name}-preIMS_to_postIMS_registered.ome.tiff",
        preIMC_image="results/{project_name}/data/preIMC/{project_name}-preIMC_to_postIMS_registered.ome.tiff",
        postIMC_image="results/{project_name}/data/postIMC/{project_name}-postIMC_to_postIMS_registered.ome.tiff"
    shell:
        "ln -sr -T {input.preIMS_to_postIMS_image} {output.preIMS_image} &&"
        " ln -sr -T {input.preIMC_to_postIMS_image} {output.preIMC_image} &&"
        " ln -sr -T {input.postIMC_to_postIMS_image} {output.postIMC_image}"


rule split_preIMC_location_geojson:
    params:
        microscopy_pixelsize=config["microscopy_pixel_size"]
    threads: 1
    input:
        table="results/{project_name}/data/preIMS_location/available_masks.csv",
        combined_geojson_file="results/{project_name}/data/preIMC_location_combined/{project_name}_reg_mask_on_preIMC.geojson"
    output:
        geojson_files="results/{project_name}/data/preIMC_location/{project_name}_reg_mask_on_preIMC_{part}.geojson"
    shell:
        "workflow/scripts/split_geojson.sh -f {input.combined_geojson_file} -s 1 -c {wildcards.part} -o {output.geojson_files}"


rule split_preIMS_location_geojson:
    params:
        microscopy_pixelsize=config["microscopy_pixel_size"]
    threads: 1
    input:
        table="results/{project_name}/data/preIMS_location/available_masks.csv",
        combined_geojson_file="results/{project_name}/data/preIMS_location_combined/{project_name}_reg_mask_on_preIMS.geojson"
    output:
        geojson_files="results/{project_name}/data/preIMS_location/{project_name}_reg_mask_on_preIMS_{part}.geojson"
    shell:
        "workflow/scripts/split_geojson.sh -f {input.combined_geojson_file} -s 1 -c {wildcards.part} -o {output.geojson_files}"


checkpoint create_preIMS_mask_table:
    input:
        combined_preIMC_geojson_dir="results/{project_name}/data/preIMC_location_combined",
        combined_preIMS_geojson_dir="results/{project_name}/data/preIMS_location_combined"
    output:
        table="results/{project_name}/data/preIMS_location/available_masks.csv"
    shell:
        "workflow/scripts/create_IMS_location_table.sh -c {input.combined_preIMC_geojson_dir} -s {input.combined_preIMS_geojson_dir} -o {output.table}"



rule prepare_register_preIMC_to_preIMS:
    params:
        microscopy_pixelsize=config["microscopy_pixel_size"]
    threads: 1
    input:
        template_file="config/template_preIMC_to_preIMS-wsireg-config.yaml",
        preIMS_mask="results/{project_name}/data/preIMS_location/{project_name}_reg_mask_on_preIMS_{part}.geojson",
        preIMC_mask="results/{project_name}/data/preIMC_location/{project_name}_reg_mask_on_preIMC_{part}.geojson",
        preIMS="results/{project_name}/data/preIMS/{project_name}_preIMS.ome.tiff",
        preIMC="results/{project_name}/data/preIMC/{project_name}_preIMC.ome.tiff"
    output:
        wsireg_config="results/{project_name}/registrations/preIMC_to_preIMS/{part}/{project_name}_{part}-wsireg-config.yaml"
    shell:
        "workflow/scripts/prepare_preIMC_to_preIMS_wsireg_config.sh -p {wildcards.project_name}_{wildcards.part} -a {input.preIMS} -b {input.preIMS_mask} -c {input.preIMC} -d {input.preIMC_mask} -s {params.microscopy_pixelsize} -t {input.template_file} -o results/{wildcards.project_name}/registrations/preIMC_to_preIMS/{wildcards.part}"
 


rule register_preIMC_to_preIMS:
    threads: 32
    input:
        preIMS_mask="results/{project_name}/data/preIMS_location/{project_name}_reg_mask_on_preIMS_{part}.geojson",
        preIMC_mask="results/{project_name}/data/preIMC_location/{project_name}_reg_mask_on_preIMC_{part}.geojson",
        preIMS="results/{project_name}/data/preIMS/{project_name}_preIMS.ome.tiff",
        preIMC="results/{project_name}/data/preIMC/{project_name}_preIMC.ome.tiff",
        wsireg_config="results/{project_name}/registrations/preIMC_to_preIMS/{part}/{project_name}_{part}-wsireg-config.yaml"
    output:
        preIMC_to_preIMS_transform="results/{project_name}/registrations/preIMC_to_preIMS/{part}/{project_name}_{part}-preIMC_to_preIMS_transformations.json",
        preIMS_orig_size_transform="results/{project_name}/registrations/preIMC_to_preIMS/{part}/.imcache_{project_name}_{part}/preIMS_orig_size_tform.json",
        preIMC_to_preIMS_image="results/{project_name}/registrations/preIMC_to_preIMS/{part}/{project_name}_{part}-preIMC_to_preIMS_registered.ome.tiff",
        imcache_dir=directory("results/{project_name}/registrations/preIMC_to_preIMS/{part}/.imcache_{project_name}_{part}"),
        logfile="results/{project_name}/registrations/preIMC_to_preIMS/{part}/log.txt"
    conda:
        "env/image_registration_wsireg.yaml"
    shell:
        "wsireg2d {input.wsireg_config} > {output.logfile} 2>&1"


rule prepare_split_transform_preIMC_to_postIMS:
    input:
        preIMC_to_preIMS_transform="results/{project_name}/registrations/preIMC_to_preIMS/{part}/{project_name}_{part}-preIMC_to_preIMS_transformations.json",
        preIMS_orig_size_transform="results/{project_name}/registrations/preIMC_to_preIMS/{part}/.imcache_{project_name}_{part}/preIMS_orig_size_tform.json",
        preIMS_to_postIMS_transform="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-preIMS_to_postIMS_transformations.json"
    output:
        preIMC_to_postIMS_transform="results/{project_name}/registrations/preIMC_to_preIMS/{part}/{project_name}_{part}-preIMC_to_postIMS_transformations.json",
    conda:
        "env/image_registration_wsireg.yaml"
    script:
        "scripts/prepare_transform_preIMC_to_postIMS.py"




rule split_IMC_location_geojson:
    params:
        microscopy_pixelsize=config["microscopy_pixel_size"],
    threads: 1
    input:
        combined_geojson_file="results/{project_name}/data/IMC_location/{project_name}_IMC_mask_on_postIMC.geojson"
    output:
        geojson_files="results/{project_name}/data/IMC_location/{project_name}_IMC_mask_on_postIMC_{core}.geojson"
    shell:
        "workflow/scripts/split_geojson.sh -f {input.combined_geojson_file} -s {params.microscopy_pixelsize} -c {wildcards.core}"

rule transform_IMC_location_to_preIMC:
    params:
        microscopy_pixelsize=config["microscopy_pixel_size"],
    threads: 16
    input:
        IMC_location_on_postIMC="results/{project_name}/data/IMC_location/{project_name}_IMC_mask_on_postIMC_{core}.geojson",
        postIMC_to_postIMS_transform="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-postIMC_to_postIMS_transformations.json"
    output:
        IMC_location_on_preIMC="results/{project_name}/data/IMC_location/{project_name}_IMC_mask_on_preIMC_{core}.geojson"
    conda:
        "env/image_registration_wsireg.yaml"
    script:
        "scripts/transform_postIMC_mask_to_preIMC.py"

rule aggregate_IMC_file:
    params:
        IMC_channels_for_aggr=config["IMC_channels_for_aggr"]
    threads: 1
    input:
        IMC="results/{project_name}/data/IMC/{sample}.ome.tiff",
        IMC_summary_panel="results/{project_name}/data/IMC_summary_panel/{sample}_summary.csv"
    output:
        IMC_aggr="results/{project_name}/data/IMC/{sample}_aggr.ome.tiff"
    conda:
        "env/image_registration_wsireg.yaml"
    script:
        "scripts/prepare_imc_for_registration.py"



def core_names_from_project_name(wildcards):
    # filter metadata file
    core_name = sample_metadata_df.loc[sample_metadata_df["project_name"] == wildcards.project_name]["core_name"]
    core_name_l = core_name.tolist()
    return core_name_l

def IMC_location_from_project_name(wildcards):
    core_name_l = core_names_from_project_name(wildcards)
    files = [ f'results/{wildcards.project_name}/data/IMC_location/{wildcards.project_name}_IMC_mask_on_preIMC_{c}.geojson' for c in core_name_l ]
    return files

checkpoint match_preIMC_location_with_IMC_location:
    threads: 1
    input:
        table="results/{project_name}/data/preIMS_location/available_masks.csv",
        preIMC_location="results/{project_name}/data/preIMC_location/{project_name}_reg_mask_on_preIMC.geojson",
        IMC_location= IMC_location_from_project_name
    output:
        matching="results/{project_name}/data/preIMC_location/matching_preIMC_location_with_IMC_location.csv"
    script:
        "scripts/match_preIMC_location_with_IMC_location.py"

def sample_name_from_core_name(wildcards):
    # filter metadata file
    sample_name = sample_metadata_df.loc[np.logical_and(sample_metadata_df["core_name"] == wildcards.core,sample_metadata_df["project_name"] == wildcards.project_name)]["sample_name"]
    sample_name_l = sample_name.tolist()
    if len(sample_name_l) > 1:
        sys.exit("Ambiguous sample name!")
    sample_name_l = sample_name_l[0]
    is_na=pd.isna(sample_name).tolist()
    if is_na[0]:
        sys.exit("sample name not found!")
    return sample_name_l

def IMC_aggr_sample_name_from_core_name(wildcards):
    sample_name = sample_name_from_core_name(wildcards)
    return "results/"+wildcards.project_name+"/data/IMC/"+sample_name+"_aggr.ome.tiff"
    


    
rule prepare_register_IMC_to_preIMC:
    params:
        microscopy_pixelsize=config["microscopy_pixel_size"],
        IMC_pixelsize=config["IMC_pixel_size"]
    threads: 1
    input:
        template_file="config/template_IMC_to_preIMC-wsireg-config.yaml",
        preIMC="results/{project_name}/data/preIMC/{project_name}_preIMC.ome.tiff",
        #IMC_aggr="results/{project_name}/data/IMC/{sample}_aggr.ome.tiff",
        IMC_aggr=IMC_aggr_sample_name_from_core_name,
        IMC_location_on_preIMC="results/{project_name}/data/IMC_location/{project_name}_IMC_mask_on_preIMC_{core}.geojson"
    output:
        wsireg_config="results/{project_name}/registrations/IMC_to_preIMC/{project_name}_{core}-wsireg-config.yaml"
    shell:
        "workflow/scripts/prepare_IMC_to_preIMC_wsireg_config.sh -p {wildcards.project_name}_{wildcards.core} -f {input.preIMC} -m {input.IMC_location_on_preIMC} -a {input.IMC_aggr} -s {params.microscopy_pixelsize} -i {params.IMC_pixelsize} -t {input.template_file} -o results/{wildcards.project_name}/registrations/IMC_to_preIMC"




rule register_IMC_to_preIMC:
    threads: 32
    input:
        IMC_aggr=IMC_aggr_sample_name_from_core_name,
        IMC_location_on_preIMC="results/{project_name}/data/IMC_location/{project_name}_IMC_mask_on_preIMC_{core}.geojson",
        preIMC="results/{project_name}/data/preIMC/{project_name}_preIMC.ome.tiff",
        wsireg_config="results/{project_name}/registrations/IMC_to_preIMC/{project_name}_{core}-wsireg-config.yaml"
    output:
        IMC_to_preIMC_transform="results/{project_name}/registrations/IMC_to_preIMC/{project_name}_{core}/{project_name}_{core}-IMC_to_preIMC_transformations.json",
        IMC_to_preIMC_image="results/{project_name}/registrations/IMC_to_preIMC/{project_name}_{core}/{project_name}_{core}-IMC_to_preIMC_registered.ome.tiff",
        imcache_dir=directory("results/{project_name}/registrations/IMC_to_preIMC/{project_name}_{core}/.imcache_{project_name}_{core}"),
        preIMC_orig_size_transform="results/{project_name}/registrations/IMC_to_preIMC/{project_name}_{core}/.imcache_{project_name}_{core}/preIMC_orig_size_tform.json",
    log:
        "results/{project_name}/registrations/IMC_to_preIMC/wsireg_log_{project_name}_{core}.txt"
    conda:
        "env/image_registration_wsireg.yaml"
    shell:
        "wsireg2d {input.wsireg_config} > {output.logfile} 2>&1"

rule precise_register_IMC_to_preIMC:
    threads: 1
    params:
        microscopy_pixelsize=config["microscopy_pixel_size"],
        IMC_pixelsize=config["IMC_pixel_size"]
    input:
        IMC_aggr=IMC_aggr_sample_name_from_core_name,
        IMC_location_on_preIMC="results/{project_name}/data/IMC_location/{project_name}_IMC_mask_on_preIMC_{core}.geojson",
        preIMC="results/{project_name}/data/preIMC/{project_name}_preIMC.ome.tiff",
    output:
        preIMC_orig_size_transform="results/{project_name}/registrations/IMC_to_preIMC/{project_name}_{core}/{project_name}_{core}_precise_preIMC_orig_size_tform.json",
        IMC_to_preIMC_transform="results/{project_name}/registrations/IMC_to_preIMC/{project_name}_{core}/{project_name}_{core}-precise_IMC_to_preIMC_transformations.json",
    conda:
        "env/image_registration_wsireg.yaml"
    script:
        "scripts/register_precise_IMC_to_preIMC.py"

def core_name_from_sample_name(wildcards):
    # filter metadata file
    core_name = sample_metadata_df.loc[np.logical_and(sample_metadata_df["sample_name"] == wildcards.sample,sample_metadata_df["project_name"] == wildcards.project_name)]["core_name"]
    core_name_l = core_name.tolist()
    if len(core_name_l) > 1:
        sys.exit("Ambiguous core name!")
    core_name_l = core_name_l[0]
    is_na=pd.isna(core_name).tolist()
    if is_na[0]:
        sys.exit("core name not found!")
    return core_name_l



def reg_type_from_core_name(core_name):
    return sample_metadata_df.loc[sample_metadata_df["core_name"] == core_name]["reg_type"].tolist()[0]
    

def IMC_to_preIMC_transform_pkl_core_name_from_sample_name(wildcards):
    core_name = core_name_from_sample_name(wildcards)
    if reg_type_from_core_name(core_name) == "precise":
        return "results/"+wildcards.project_name+"/registrations/IMC_to_preIMC/"+wildcards.project_name+"_"+core_name+"/"+ wildcards.project_name+"_"+core_name+ "-precise_IMC_to_preIMC_transformations.json"
    else:
        return "results/"+wildcards.project_name+"/registrations/IMC_to_preIMC/"+wildcards.project_name+"_"+core_name+"/"+ wildcards.project_name+"_"+core_name+ "-IMC_to_preIMC_transformations.json"
    

def preIMC_orig_size_transform_core_name_from_sample_name(wildcards):
    core_name = core_name_from_sample_name(wildcards)
    if reg_type_from_core_name(core_name) == "precise":
        return "results/"+wildcards.project_name+"/registrations/IMC_to_preIMC/"+wildcards.project_name+"_"+core_name+"/"+wildcards.project_name+"_"+core_name+"_precise_preIMC_orig_size_tform.json"
    else:
        return "results/"+wildcards.project_name+"/registrations/IMC_to_preIMC/"+wildcards.project_name+"_"+core_name+"/.imcache_"+wildcards.project_name+"_"+core_name+"/preIMC_orig_size_tform.json"


def decide_use_direct_preIMC_to_postIMS_transform(wildcards):
    table_file = checkpoints.create_preIMS_mask_table.get(project_name=wildcards.project_name).output['table']
    if os.stat(table_file).st_size == 0:
        return True
    else:
        return False

def choose_preIMC_to_postIMS_transform(wildcards):
    use_direct = decide_use_direct_preIMC_to_postIMS_transform(wildcards)
    if use_direct:
        outfile = f'results/{wildcards.project_name}/registrations/postIMC_to_postIMS/{wildcards.project_name}-preIMC_to_postIMS_transformations.json'
        return outfile
    else:
        match_preIMC_location_with_IMC_location_file = checkpoints.match_preIMC_location_with_IMC_location.get(project_name=wildcards.project_name).output['matching']
        with match_preIMC_location_with_IMC_location_file.open() as f:
            df = pd.read_csv(f) 
            core=core_name_from_sample_name(wildcards)
            part=df.loc[df["core"] == core]["preIMC_location"].tolist()[0]
            outfile = f'results/{wildcards.project_name}/registrations/preIMC_to_preIMS/{part}/{wildcards.project_name}_{part}-preIMC_to_postIMS_transformations.json'
            return outfile


rule transform_IMCaggr_to_postIMS:
    threads: 32
    input:
        IMC_to_preIMC_transform=IMC_to_preIMC_transform_pkl_core_name_from_sample_name,
        preIMC_orig_size_transform=preIMC_orig_size_transform_core_name_from_sample_name,
        #preIMC_to_postIMS_transform_inverted="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-preIMC_to_postIMS_transformations_inverted.pkl",
        #preIMC_to_postIMS_transform="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-preIMC_to_postIMS_transformations.json",
        preIMC_to_postIMS_transform=choose_preIMC_to_postIMS_transform,
        table_file="results/{project_name}/data/preIMS_location/available_masks.csv",
        IMC="results/{project_name}/data/IMC/{sample}_aggr.ome.tiff"
    output:
        IMC_transformed="results/{project_name}/data/IMC/{sample}_aggr_transformed.ome.tiff"
    conda:
        "env/image_registration_wsireg.yaml"
    script:
        "scripts/transform_IMC_to_postIMS.py"


rule transform_IMCmask_to_postIMS:
    threads: 32
    input:
        IMC_to_preIMC_transform=IMC_to_preIMC_transform_pkl_core_name_from_sample_name,
        preIMC_orig_size_transform=preIMC_orig_size_transform_core_name_from_sample_name,
        #preIMC_to_postIMS_transform="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-preIMC_to_postIMS_transformations.json",
        preIMC_to_postIMS_transform=choose_preIMC_to_postIMS_transform,
        table_file="results/{project_name}/data/preIMS_location/available_masks.csv",
        IMC="results/{project_name}/data/IMC_mask/{sample}.tiff"
    output:
        IMC_transformed="results/{project_name}/data/IMC_mask/{sample}_transformed.ome.tiff"
    conda:
        "env/image_registration_wsireg.yaml"
    script:
        "scripts/transform_IMC_to_postIMS.py"


rule transformed_IMCmask_to_shape:
    threads: 16
    input:
        IMCmask="results/{project_name}/data/IMC_mask/{sample}_transformed.ome.tiff"
    output:
        IMCmask_shape_transformed="results/{project_name}/data/IMC_mask/{sample}_transformed_cell_masks.geojson",
        cell_indices="results/{project_name}/data/IMC_mask/{sample}_transformed_cell_indices.pkl"
    conda:
        "env/image_registration_wsireg.yaml"
    script:
        "scripts/shapes_from_IMCmask.py"


rule calculate_cell_centroid_positions:
    threads: 1
    input:
        cell_indices="results/{project_name}/data/IMC_mask/{sample}_transformed_cell_indices.pkl",
        IMCmask_transformed="results/{project_name}/data/IMC_mask/{sample}_transformed_cell_masks.geojson"
    output:
        cell_centroids="results/{project_name}/data/cell_overlap/{project_name}_{sample}_cell_centroids.csv"
    conda:
        "env/image_registration_wsireg.yaml"
    script:
        "scripts/cell_centroids_from_shapes.py"


def get_IMS_pixel_size_from_metadata(wildcards):
    return sample_metadata_df.loc[sample_metadata_df["sample_name"] == wildcards.sample]["IMS_pixel_size"].tolist()[0]


def get_IMS_coords_file_from_metadata(wildcards):
    coords_file = sample_metadata_df.loc[sample_metadata_df["sample_name"] == wildcards.sample]["coords_filename"].tolist()[0]
    return "results/" + wildcards.project_name + "/data/IMS/"+ coords_file


rule calculate_cell_overlap_with_IMS:
    params:
        #IMS_pixel_size=config["IMS_pixel_size"],
        IMS_pixel_size=get_IMS_pixel_size_from_metadata,
        IMC_pixel_size=config["IMC_pixel_size"],
        ims_shrink_factor=config["ims_shrink_factor"]
    threads: 1
    input:
        #imsml_coords_fp="results/{project_name}/data/IMS/{project_name}-IMSML-coords.h5",
        imsml_coords_fp=get_IMS_coords_file_from_metadata,
        cell_indices="results/{project_name}/data/IMC_mask/{sample}_transformed_cell_indices.pkl",
        IMCmask_transformed="results/{project_name}/data/IMC_mask/{sample}_transformed_cell_masks.geojson"
    output:
        cell_overlaps="results/{project_name}/data/cell_overlap/{project_name}_{sample}_cell_overlap_IMS.csv"
    conda:
        "env/image_registration_wsireg.yaml"
    script:
        "scripts/cell_ims_intersections.py"


def get_imzml_base_filename(wildcards):
    return "results/" + wildcards.project_name + "/data/IMS/" + wildcards.imzml_base
def get_imzml_filename(wildcards):
    return get_imzml_base_filename(wildcards) + ".imzML"
def get_ibd_filename(wildcards):
    return get_imzml_base_filename(wildcards) + ".ibd"
def get_peaklist_filename(wildcards):
    return get_imzml_base_filename(wildcards) + "_peaklist.csv"

rule process_imzml:
    threads: 16
    input: 
        imzml=get_imzml_filename,
        ibd=get_ibd_filename,
        peaklist=get_peaklist_filename
        #imzml="results/{project_name}/data/IMS/{project_name}_IMS.imzML",
        #ibd="results/{project_name}/data/IMS/{project_name}_IMS.ibd",
        #peaklist="results/{project_name}/data/IMS/{project_name}_peaklist.csv"
    output:
        peaks="results/{project_name}/data/IMS/{imzml_base}_peaks.h5"
    container:
        "docker://retogerber/imcr:1.0"
    script:
        "scripts/process_imzml.R"





