
rule transformed_IMCmask_to_shape:
    threads: 4
    params:
        input_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_IMC_location=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        output_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMC_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
    input:
        IMCmask="results/{project_name}/data/IMC_mask/{project_name}_IMC_transformed_on_postIMS.ome.tiff",
        IMC_location=lambda wildcards: f'results/{wildcards.project_name}/data/IMC_location/{wildcards.project_name}_IMC_mask_on_postIMS_{get_column_entry_from_metadata_two_conditions(wildcards.sample,wildcards.project_name, "core_name", "sample_name","project_name", read_sample_metadata(config["sample_metadata"]))}.geojson',
    output:
        IMCmask_shape_transformed="results/{project_name}/data/IMC_mask/{sample}_transformed_on_postIMS_cell_masks.geojson",
        cell_indices="results/{project_name}/data/IMC_mask/{sample}_transformed_on_postIMS_cell_indices.pkl",
    log:
        stdout="logs/transform_IMCmask_to_shape/{project_name}_{sample}.stdout",
    benchmark:
        "benchmarks/transform_IMCmask_to_shape/{project_name}_{sample}.txt",
    # conda:
    #    "env/image_registration_wsireg.yaml"
    container:
        config["container"]
    script:
        "scripts/Overlap/shapes_from_IMCmask.py"


rule calculate_cell_centroid_positions:
    threads: 1
    input:
        cell_indices="results/{project_name}/data/IMC_mask/{sample}_transformed_on_postIMS_cell_indices.pkl",
        IMCmask_transformed="results/{project_name}/data/IMC_mask/{sample}_transformed_on_postIMS_cell_masks.geojson",
    output:
        cell_centroids="results/{project_name}/data/cell_overlap/{project_name}_{sample}_cell_centroids.csv",
    log:
        stdout="logs/calculate_cell_centroid_positions/{project_name}_{sample}.stdout",
        stderr="logs/calculate_cell_centroid_positions/{project_name}_{sample}.stderr",
    benchmark:
        "benchmarks/calculate_cell_centroid_positions/{project_name}_{sample}.txt",
    # conda:
    #    "env/image_registration_wsireg.yaml"
    container:
        config["container"]
    script:
        "scripts/Overlap/cell_centroids_from_shapes.py"


rule calculate_cell_overlap_with_IMS:
    params:
        IMS_pixelsize=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMS_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        IMC_pixelsize=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        IMS_shrink_factor=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMS_shrink_factor",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
    threads: 1
    input:
        imsml_coords_fp=choose_imsml_coordsfile,
        cell_indices="results/{project_name}/data/IMC_mask/{sample}_transformed_on_postIMS_cell_indices.pkl",
        IMCmask_transformed="results/{project_name}/data/IMC_mask/{sample}_transformed_on_postIMS_cell_masks.geojson",
    output:
        cell_overlaps="results/{project_name}/data/cell_overlap/{project_name}_{sample}_cell_overlap_IMS.csv",
    log:
        stdout="logs/calculate_cell_overlap_with_IMS/{project_name}_{sample}.stdout",
        stderr="logs/calculate_cell_overlap_with_IMS/{project_name}_{sample}.stderr",
    benchmark:
        "benchmarks/calculate_cell_overlap_with_IMS/{project_name}_{sample}.txt",
    # conda:
    #    "env/image_registration_wsireg.yaml"
    container:
        config["container"]
    script:
        "scripts/Overlap/cell_ims_intersections.py"

rule calculate_mean_IMC_intensities_with_IMS:
    params:
        IMS_pixelsize=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMS_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        microscopy_pixelsize=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        IMC_pixelsize=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMC_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        IMS_shrink_factor=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMS_shrink_factor",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        IMC_channels_for_aggr=config["IMC_channels_for_aggr"],
        image_utils_file="workflow/scripts/utils/image_utils.py",
    threads: 1
    input:
        # imzml_coords=choose_imsml_coordsfile,
        # imzml_peaks=imzml_peaks_from_sample_and_project,
        IMS_transformed="results/{project_name}/data/IMS/{project_name}_IMS_on_postIMS.ome.tiff",
        IMC_transformed="results/{project_name}/data/IMC/{project_name}_IMC_aggr_transformed.ome.tiff",
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"postIMS"),
        IMC_summary_panel="results/{project_name}/data/IMC_summary_panel/{sample}_summary.csv",
    output:
        IMC_mean_on_IMS = "results/{project_name}/data/cell_overlap/{project_name}_{sample}_mean_intensity_on_IMS.csv"
    log:
        stdout="logs/calculate_mean_IMC_intensities_with_IMS/{project_name}_{sample}.stdout",
        stderr="logs/calculate_mean_IMC_intensities_with_IMS/{project_name}_{sample}.stderr",
    benchmark:
        "benchmarks/calculate_mean_IMC_intensities_with_IMS/{project_name}_{sample}.txt",
    # conda:
    #    "env/image_registration_wsireg.yaml"
    container:
        config["container"]
    script:
        "scripts/Overlap/marker_intensities_ims_intersections.py"




rule combine_IMS_celloverlap_data:
    params:
        IMS_pixelsize=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMS_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        IMS_shrink_factor=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMS_shrink_factor",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        combine_IMS_utils_file="workflow/scripts/Overlap/combine_IMS_utils.R",
    threads: 16
    resources:
        mem_mb=20000,
    input:
        imsml_coords_fp=choose_imsml_coordsfile_from_imzml,
        peaks="results/{project_name}/data/IMS/{imzml_base}_peaks.h5",
        cell_overlaps=lambda wildcards: expand(
            "results/{{project_name}}/data/cell_overlap/{{project_name}}_{sample}_cell_overlap_IMS.csv",
            sample=get_column_entry_from_metadata_two_conditions(
                wildcards.project_name,
                f"{wildcards.imzml_base}.imzML",
                "sample_name",
                "project_name",
                "imzml_filename",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        cell_centroids=lambda wildcards: expand(
            "results/{{project_name}}/data/cell_overlap/{{project_name}}_{sample}_cell_centroids.csv",
            sample=get_column_entry_from_metadata_two_conditions(
                wildcards.project_name,
                f"{wildcards.imzml_base}.imzML",
                "sample_name",
                "project_name",
                "imzml_filename",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        IMC_mean_on_IMS=lambda wildcards: expand(
            "results/{{project_name}}/data/cell_overlap/{{project_name}}_{sample}_mean_intensity_on_IMS.csv",
            sample=get_column_entry_from_metadata_two_conditions(
                wildcards.project_name,
                f"{wildcards.imzml_base}.imzML",
                "sample_name",
                "project_name",
                "imzml_filename",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
    output:
        combined_data="results/{project_name}/data/cell_overlap/{project_name}_{imzml_base}_peak_cell_overlap.csv",
    log:
        stdout="logs/combine_IMS_celloverlap_data/{project_name}_{imzml_base}.stdout",
    benchmark:
        "benchmarks/combine_IMS_celloverlap_data/{project_name}_{imzml_base}.txt",
    container:
        config["container"]
    script:
        "scripts/Overlap/combine_IMS.R"

