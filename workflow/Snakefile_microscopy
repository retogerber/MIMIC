rule download_yq:
    output:
        "results/Misc/yq",
    log:
        stdout="logs/download_yq/log.stdout",
        stderr="logs/download_yq/log.stderr",
    # container:
    #    config["container"]
    shell:
        "cd results/Misc && wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O > ../../{log.stdout} 2> ../../{log.stderr} yq && chmod +x yq >> ../../{log.stdout} 2>> ../../{log.stderr}"


rule extract_microscopy_mask_from_registration_postIMS_nogeojson:
    params:
        microscopy_pixelsize=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        mask_type=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "postIMSpreIMSmask",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
    threads: 16
    input:
        postIMS="results/{project_name}/data/postIMS/{project_name}_postIMS.ome.tiff",
    output:
        postIMSmask="results/{project_name}/data/postIMS/{project_name}_postIMS_mask_for_reg_nogeojson.ome.tiff",
    log:
        stdout="logs/extract_microscopy_mask_from_registration_postIMS_nogeojson/{project_name}.stdout",
        stderr="logs/extract_microscopy_mask_from_registration_postIMS_nogeojson/{project_name}.stderr",
    benchmark:
        "benchmarks/extract_microscopy_mask_from_registration_postIMS_nogeojson/{project_name}.txt",
    # conda:
    #    "env/image_registration_wsireg.yaml"
    container:
        config["container"]
    script:
        "scripts/Microscopy/TMA_mask_from_image.py"

use rule extract_microscopy_mask_from_registration_postIMS_nogeojson as extract_microscopy_mask_from_registration_preIMS_nogeojson with:
    input:
        postIMS="results/{project_name}/data/preIMS/{project_name}_preIMS.ome.tiff",
    output:
        postIMSmask="results/{project_name}/data/preIMS/{project_name}_preIMS_mask_for_reg_nogeojson.ome.tiff",
    log:
        stdout="logs/extract_microscopy_mask_from_registration_preIMS_nogeojson/{project_name}.stdout",
        stderr="logs/extract_microscopy_mask_from_registration_preIMS_nogeojson/{project_name}.stderr",
    benchmark:
        "benchmarks/extract_microscopy_mask_from_registration_preIMS_nogeojson/{project_name}.txt",

use rule extract_microscopy_mask_from_registration_postIMS_nogeojson as extract_microscopy_mask_from_registration_postIMS_geojson with:
    input:
        postIMS="results/{project_name}/data/postIMS/{project_name}_postIMS.ome.tiff",
        TMA_location="results/{project_name}/data/TMA_location/{project_name}_TMA_mask_on_postIMS.geojson",
    output:
        postIMSmask="results/{project_name}/data/postIMS/{project_name}_postIMS_mask_for_reg_geojson.ome.tiff",
    log:
        stdout="logs/extract_microscopy_mask_from_registration_postIMS_nogeojson/{project_name}.stdout",
        stderr="logs/extract_microscopy_mask_from_registration_postIMS_nogeojson/{project_name}.stderr",
    benchmark:
        "benchmarks/extract_microscopy_mask_from_registration_postIMS_nogeojson/{project_name}.txt",


use rule extract_microscopy_mask_from_registration_postIMS_nogeojson as extract_microscopy_mask_from_registration_preIMS_geojson with:
    input:
        postIMS="results/{project_name}/data/preIMS/{project_name}_preIMS.ome.tiff",
        TMA_location="results/{project_name}/data/TMA_location/{project_name}_TMA_mask_on_preIMS.geojson",
    output:
        postIMSmask="results/{project_name}/data/preIMS/{project_name}_preIMS_mask_for_reg_geojson.ome.tiff",
    log:
        stdout="logs/extract_microscopy_mask_from_registration_preIMS_nogeojson/{project_name}.stdout",
        stderr="logs/extract_microscopy_mask_from_registration_preIMS_nogeojson/{project_name}.stderr",
    benchmark:
        "benchmarks/extract_microscopy_mask_from_registration_preIMS_nogeojson/{project_name}.txt",

checkpoint create_postIMSpreIMS_mask_table:
    input:
        script="workflow/scripts/Microscopy/create_postIMSpreIMSmask_geojson_presence.sh",
        TMA_geojson_dir="results/{project_name}/data/TMA_location",
    output:
        table="results/{project_name}/data/TMA_location/use_which_postIMSpreIMS_geojsons.csv",
    log:
        stdout="logs/create_postIMSpreIMS_mask_table/{project_name}.stdout",
        stderr="logs/create_postIMSpreIMS_mask_table/{project_name}.stderr",
    container:
        config["container"]
    shell:
        "workflow/scripts/Microscopy/create_postIMSpreIMSmask_geojson_presence.sh -i {input.TMA_geojson_dir} -o {output.table}  > {log.stdout} 2> {log.stderr} "


rule prepare_register_postIMC_to_postIMS:
    params:
        microscopy_pixelsize=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        postIMSpreIMSmask=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "postIMSpreIMSmask",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
    threads: 1
    input:
        script="workflow/scripts/Microscopy/prepare_postIMC_to_postIMS_wsireg_config.sh",
        yq="results/Misc/yq",
        template_file="config/template_postIMC_to_postIMS-wsireg-config.yaml",
        postIMS="results/{project_name}/data/postIMS/{project_name}_postIMS.ome.tiff",
        postIMSmask=lambda wildcards: decide_postIMSpreIMSmask(wildcards, "postIMS"),
        preIMS="results/{project_name}/data/preIMS/{project_name}_preIMS.ome.tiff",
        preIMSmask=lambda wildcards: decide_postIMSpreIMSmask(wildcards, "preIMS"),
        preIMC="results/{project_name}/data/preIMC/{project_name}_preIMC.ome.tiff",
        postIMC="results/{project_name}/data/postIMC/{project_name}_postIMC.ome.tiff",
        table="results/{project_name}/data/TMA_location/use_which_postIMSpreIMS_geojsons.csv",
    output:
        wsireg_config="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-wsireg-config.yaml",
    log:
        stdout="logs/prepare_register_postIMC_to_postIMS/{project_name}.stdout",
        stderr="logs/prepare_register_postIMC_to_postIMS/{project_name}.stderr",
    container:
        config["container"]
    shell:
        "workflow/scripts/Microscopy/prepare_postIMC_to_postIMS_wsireg_config.sh -p {wildcards.project_name} -a {input.postIMS} -b {input.preIMS} -c {input.preIMC} -d {input.postIMC} -e {input.postIMSmask} -f {input.preIMSmask} -s {params.microscopy_pixelsize} -t {input.template_file} -o results/{wildcards.project_name}/registrations/postIMC_to_postIMS > {log.stdout} 2> {log.stderr}"


rule register_postIMC_to_postIMS:
    threads: 32
    resources:
        mem_mb=200000,
    input:
        script="workflow/scripts/Microscopy/run_postIMC_to_postIMS_registration.sh",
        postIMS="results/{project_name}/data/postIMS/{project_name}_postIMS.ome.tiff",
        postIMSmask=lambda wildcards: decide_postIMSpreIMSmask(wildcards, "postIMS"),
        preIMS="results/{project_name}/data/preIMS/{project_name}_preIMS.ome.tiff",
        preIMSmask=lambda wildcards: decide_postIMSpreIMSmask(wildcards, "preIMS"),
        preIMC="results/{project_name}/data/preIMC/{project_name}_preIMC.ome.tiff",
        postIMC="results/{project_name}/data/postIMC/{project_name}_postIMC.ome.tiff",
        wsireg_config="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-wsireg-config.yaml",
        table="results/{project_name}/data/TMA_location/use_which_postIMSpreIMS_geojsons.csv",
    output:
        preIMS_to_postIMS_transform="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-preIMS_to_postIMS_transformations.json",
        preIMS_to_postIMS_image="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-preIMS_to_postIMS_registered.ome.tiff",
        preIMC_to_postIMS_transform="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-preIMC_to_postIMS_transformations.json",
        preIMC_to_postIMS_image="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-preIMC_to_postIMS_registered.ome.tiff",
        postIMC_to_postIMS_transform="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-postIMC_to_postIMS_transformations.json",
        postIMC_to_postIMS_image="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-postIMC_to_postIMS_registered.ome.tiff",
        imcache_dir=directory(
            "results/{project_name}/registrations/postIMC_to_postIMS/.imcache_{project_name}"
        ),
    log:
        stdout="logs/register_postIMC_to_postIMS/{project_name}.stdout",
        stderr="logs/register_postIMC_to_postIMS/{project_name}.stderr",
    benchmark:
        "benchmarks/register_postIMC_to_postIMS/{project_name}.txt",
    # conda:
    #    "env/image_registration_wsireg.yaml"
    container:
        config["container"]
    shell:
        "workflow/scripts/Microscopy/run_postIMC_to_postIMS_registration.sh -a {input.wsireg_config} > {log.stdout} 2> {log.stderr}"


rule postprocess_register_postIMC_to_postIMS:
    threads: 1
    input:
        script="workflow/scripts/Microscopy/postprocess_registration_postIMC_to_postIMS.sh",
        yq="results/Misc/yq",
        preIMS_to_postIMS_image="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-preIMS_to_postIMS_registered.ome.tiff",
        preIMC_to_postIMS_image="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-preIMC_to_postIMS_registered.ome.tiff",
        postIMC_to_postIMS_image="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-postIMC_to_postIMS_registered.ome.tiff",
        preIMC_to_postIMS_transform="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-preIMC_to_postIMS_transformations.json",
        postIMC_to_postIMS_transform="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-postIMC_to_postIMS_transformations.json",
        preIMS="results/{project_name}/data/preIMS/{project_name}_preIMS.ome.tiff",
        preIMC="results/{project_name}/data/preIMC/{project_name}_preIMC.ome.tiff",
    output:
        preIMS_image="results/{project_name}/data/preIMS/{project_name}-preIMS_to_postIMS_registered.ome.tiff",
        preIMC_image="results/{project_name}/data/preIMC/{project_name}-preIMC_to_postIMS_registered.ome.tiff",
        postIMC_image="results/{project_name}/data/postIMC/{project_name}-postIMC_to_postIMS_registered.ome.tiff",
        preIMC_to_postIMS_transform="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-preIMC_to_postIMS_transformations_mod.json",
        postIMC_to_postIMS_transform="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-postIMC_to_postIMS_transformations_mod.json",
    log:
        stdout="logs/postprocess_register_postIMC_to_postIMS/{project_name}.stdout",
        stderr="logs/postprocess_register_postIMC_to_postIMS/{project_name}.stderr",
    container:
        config["container"]
    shell:
        "workflow/scripts/Microscopy/postprocess_registration_postIMC_to_postIMS.sh -a {input.preIMS_to_postIMS_image} -b {input.preIMC_to_postIMS_image} -c {input.postIMC_to_postIMS_image} -d {input.preIMC_to_postIMS_transform} -e {input.postIMC_to_postIMS_transform} -f {input.preIMS} -g {input.preIMC} -h {output.preIMS_image} -i {output.preIMC_image} -j {output.postIMC_image} -k {output.preIMC_to_postIMS_transform} -l {output.postIMC_to_postIMS_transform} > {log.stdout} 2> {log.stderr}"


rule split_preIMC_location_geojson:
    params:
        microscopy_pixelsize=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
    threads: 1
    input:
        script="workflow/scripts/split_geojson.sh",
        table="results/{project_name}/data/preIMS_location/available_masks.csv",
        combined_geojson_file="results/{project_name}/data/preIMC_location_combined/{project_name}_reg_mask_on_preIMC.geojson",
    output:
        geojson_files="results/{project_name}/data/preIMC_location/{project_name}_reg_mask_on_preIMC_{part}.geojson",
    log:
        stdout="logs/split_preIMC_location_geojson/{project_name}_{part}.stdout",
        stderr="logs/split_preIMC_location_geojson/{project_name}_{part}.stderr",
    container:
        config["container"]
    shell:
        "workflow/scripts/split_geojson.sh -f {input.combined_geojson_file} -s 1 -c {wildcards.part} -o {output.geojson_files}  > {log.stdout} 2> {log.stderr} "


rule split_preIMS_location_geojson:
    params:
        microscopy_pixelsize=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
    threads: 1
    input:
        script="workflow/scripts/split_geojson.sh",
        table="results/{project_name}/data/preIMS_location/available_masks.csv",
        combined_geojson_file="results/{project_name}/data/preIMS_location_combined/{project_name}_reg_mask_on_preIMS.geojson",
    output:
        geojson_files="results/{project_name}/data/preIMS_location/{project_name}_reg_mask_on_preIMS_{part}.geojson",
    log:
        stdout="logs/split_preIMS_location_geojson/{project_name}_{part}.stdout",
        stderr="logs/split_preIMS_location_geojson/{project_name}_{part}.stderr",
    container:
        config["container"]
    shell:
        "workflow/scripts/split_geojson.sh -f {input.combined_geojson_file} -s 1 -c {wildcards.part} -o {output.geojson_files}  > {log.stdout} 2> {log.stderr} "


checkpoint create_preIMS_mask_table:
    input:
        script="workflow/scripts/Microscopy/create_IMS_location_table.sh",
        combined_preIMC_geojson_dir="results/{project_name}/data/preIMC_location_combined",
        combined_preIMS_geojson_dir="results/{project_name}/data/preIMS_location_combined",
    output:
        table="results/{project_name}/data/preIMS_location/available_masks.csv",
    log:
        stdout="logs/create_preIMS_mask_table/{project_name}.stdout",
        stderr="logs/create_preIMS_mask_table/{project_name}.stderr",
    container:
        config["container"]
    shell:
        "workflow/scripts/Microscopy/create_IMS_location_table.sh -c {input.combined_preIMC_geojson_dir} -s {input.combined_preIMS_geojson_dir} -o {output.table}  > {log.stdout} 2> {log.stderr} "


rule prepare_register_preIMC_to_preIMS:
    params:
        microscopy_pixelsize=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
    threads: 1
    input:
       script="workflow/scripts/Microscopy/prepare_preIMC_to_preIMS_wsireg_config.sh",
        template_file="config/template_preIMC_to_preIMS-wsireg-config.yaml",
        preIMS_mask="results/{project_name}/data/preIMS_location/{project_name}_reg_mask_on_preIMS_{part}.geojson",
        preIMC_mask="results/{project_name}/data/preIMC_location/{project_name}_reg_mask_on_preIMC_{part}.geojson",
        preIMS="results/{project_name}/data/preIMS/{project_name}_preIMS.ome.tiff",
        preIMC="results/{project_name}/data/preIMC/{project_name}_preIMC.ome.tiff",
    output:
        wsireg_config="results/{project_name}/registrations/preIMC_to_preIMS/{part}/{project_name}_{part}-wsireg-config.yaml",
    log:
        stdout="logs/prepare_register_preIMC_to_preIMS/{project_name}_{part}.stdout",
        stderr="logs/prepare_register_preIMC_to_preIMS/{project_name}_{part}.stderr",
    container:
        config["container"]
    shell:
        "workflow/scripts/Microscopy/prepare_preIMC_to_preIMS_wsireg_config.sh -p {wildcards.project_name}_{wildcards.part} -a {input.preIMS} -b {input.preIMS_mask} -c {input.preIMC} -d {input.preIMC_mask} -s {params.microscopy_pixelsize} -t {input.template_file} -o results/{wildcards.project_name}/registrations/preIMC_to_preIMS/{wildcards.part}  > {log.stdout} 2> {log.stderr} "


rule register_preIMC_to_preIMS:
    threads: 32
    resources:
        mem_mb=200000,
    input:
        preIMS_mask="results/{project_name}/data/preIMS_location/{project_name}_reg_mask_on_preIMS_{part}.geojson",
        preIMC_mask="results/{project_name}/data/preIMC_location/{project_name}_reg_mask_on_preIMC_{part}.geojson",
        preIMS="results/{project_name}/data/preIMS/{project_name}_preIMS.ome.tiff",
        preIMC="results/{project_name}/data/preIMC/{project_name}_preIMC.ome.tiff",
        wsireg_config="results/{project_name}/registrations/preIMC_to_preIMS/{part}/{project_name}_{part}-wsireg-config.yaml",
    output:
        preIMC_to_preIMS_transform="results/{project_name}/registrations/preIMC_to_preIMS/{part}/{project_name}_{part}-preIMC_to_preIMS_transformations.json",
        preIMS_orig_size_transform="results/{project_name}/registrations/preIMC_to_preIMS/{part}/.imcache_{project_name}_{part}/preIMS_orig_size_tform.json",
        preIMC_to_preIMS_image="results/{project_name}/registrations/preIMC_to_preIMS/{part}/{project_name}_{part}-preIMC_to_preIMS_registered.ome.tiff",
        imcache_dir=directory(
            "results/{project_name}/registrations/preIMC_to_preIMS/{part}/.imcache_{project_name}_{part}"
        ),
    log:
        stdout="logs/register_preIMC_to_preIMS/{project_name}_{part}.stdout",
        stderr="logs/register_preIMC_to_preIMS/{project_name}_{part}.stderr",
    benchmark:
        "benchmarks/register_preIMC_to_preIMS/{project_name}_{part}.txt",
    # conda:
    #    "env/image_registration_wsireg.yaml"
    container:
        config["container"]
    shell:
        "wsireg2d {input.wsireg_config}  > {log.stdout} 2> {log.stderr}"


rule prepare_split_transform_preIMC_to_postIMS:
    input:
        preIMC_to_preIMS_transform="results/{project_name}/registrations/preIMC_to_preIMS/{part}/{project_name}_{part}-preIMC_to_preIMS_transformations.json",
        preIMS_orig_size_transform="results/{project_name}/registrations/preIMC_to_preIMS/{part}/.imcache_{project_name}_{part}/preIMS_orig_size_tform.json",
        preIMS_to_postIMS_transform="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-preIMS_to_postIMS_transformations.json",
    output:
        preIMC_to_postIMS_transform="results/{project_name}/registrations/preIMC_to_preIMS/{part}/{project_name}_{part}-preIMC_to_postIMS_transformations_mod.json",
    log:
        stdout="logs/prepare_split_transform_preIMC_to_postIMS/{project_name}_{part}.stdout",
        stderr="logs/prepare_split_transform_preIMC_to_postIMS/{project_name}_{part}.stderr",
    # conda:
    #    "env/image_registration_wsireg.yaml"
    container:
        config["container"]
    script:
        "scripts/Microscopy/prepare_transform_preIMC_to_postIMS.py"


rule prepare_split_transform_postIMC_to_postIMS:
    input:
        postIMC_to_preIMC_transform="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-postIMC_to_postIMS_transformations_mod.json",
        preIMC_to_preIMS_transform="results/{project_name}/registrations/preIMC_to_preIMS/{part}/{project_name}_{part}-preIMC_to_preIMS_transformations.json",
        preIMS_orig_size_transform="results/{project_name}/registrations/preIMC_to_preIMS/{part}/.imcache_{project_name}_{part}/preIMS_orig_size_tform.json",
        preIMS_to_postIMS_transform="results/{project_name}/registrations/postIMC_to_postIMS/{project_name}-preIMS_to_postIMS_transformations.json",
    output:
        postIMC_to_postIMS_transform="results/{project_name}/registrations/postIMC_to_postIMS/{part}/{project_name}_{part}-postIMC_to_postIMS_transformations_mod.json",
    log:
        stdout="logs/prepare_split_transform_preIMC_to_postIMS/{project_name}_{part}.stdout",
        stderr="logs/prepare_split_transform_preIMC_to_postIMS/{project_name}_{part}.stderr",
    # conda:
    #    "env/image_registration_wsireg.yaml"
    container:
        config["container"]
    script:
        "scripts/Microscopy/prepare_transform_postIMC_to_postIMS.py"


rule transform_postIMC_to_postIMS:
    threads: 32
    resources:
        mem_mb=100000,
    params:
        input_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        IMC_location_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        output_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        transform_source="postIMC",
        transform_target="postIMS",
    input:
        postIMC_to_postIMS_transform=choose_postIMC_to_postIMS_transform,
        table_file="results/{project_name}/data/preIMS_location/available_masks.csv",
        postIMC="results/{project_name}/data/postIMC/{project_name}_postIMC.ome.tiff",
        IMC_location=lambda wildcards: f'results/{wildcards.project_name}/data/IMC_location/{wildcards.project_name}_registered_IMC_mask_on_postIMC_{get_column_entry_from_metadata_two_conditions(wildcards.sample,wildcards.project_name, "core_name", "sample_name","project_name", read_sample_metadata(config["sample_metadata"]))}.geojson',
    output:
        postIMC_transformed="results/{project_name}/data/postIMC/{sample}_transformed_on_postIMS.ome.tiff",
    log:
        stdout="logs/transform_postIMC_to_postIMS/{project_name}_{sample}.stdout",
    benchmark:
        "benchmarks/transform_postIMC_to_postIMS/{project_name}_{sample}.txt",
    container:
        config["container"]
    script:
        "scripts/Microscopy/transform_postIMC_to_postIMS.py"


rule transform_postIMC_to_preIMC:
    threads: 32
    resources:
        mem_mb=100000,
    params:
        input_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        IMC_location_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        output_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMC_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        transform_source="postIMC",
        transform_target="preIMC",
    input:
        postIMC_to_postIMS_transform=choose_postIMC_to_postIMS_transform,
        table_file="results/{project_name}/data/preIMS_location/available_masks.csv",
        postIMC="results/{project_name}/data/postIMC/{project_name}_postIMC.ome.tiff",
        IMC_location=lambda wildcards: f'results/{wildcards.project_name}/data/IMC_location/{wildcards.project_name}_registered_IMC_mask_on_postIMC_{get_column_entry_from_metadata_two_conditions(wildcards.sample,wildcards.project_name, "core_name", "sample_name","project_name", read_sample_metadata(config["sample_metadata"]))}.geojson',
    output:
        postIMC_transformed="results/{project_name}/data/postIMC/{sample}_transformed_on_preIMC.ome.tiff",
    log:
        stdout="logs/transform_postIMC_to_preIMC/{project_name}_{sample}.stdout",
    benchmark:
        "benchmarks/transform_postIMC_to_preIMC/{project_name}_{sample}.txt",
    container:
        config["container"]
    script:
        "scripts/Microscopy/transform_postIMC_to_postIMS.py"


rule transform_preIMC_to_preIMS:
    threads: 32
    resources:
        mem_mb=100000,
    params:
        input_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        IMC_location_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        output_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMC_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        transform_source="preIMC",
        transform_target="preIMS",
    input:
        postIMC_to_postIMS_transform=choose_postIMC_to_postIMS_transform,
        table_file="results/{project_name}/data/preIMS_location/available_masks.csv",
        postIMC="results/{project_name}/data/preIMC/{project_name}_preIMC.ome.tiff",
        IMC_location=lambda wildcards: f'results/{wildcards.project_name}/data/IMC_location/{wildcards.project_name}_IMC_mask_on_preIMC_{get_column_entry_from_metadata_two_conditions(wildcards.sample,wildcards.project_name, "core_name", "sample_name","project_name", read_sample_metadata(config["sample_metadata"]))}.geojson',
    output:
        postIMC_transformed="results/{project_name}/data/preIMC/{sample}_transformed_on_preIMS.ome.tiff",
    log:
        stdout="logs/transform_preIMC_to_preIMS/{project_name}_{sample}.stdout",
    benchmark:
        "benchmarks/transform_preIMC_to_preIMS/{project_name}_{sample}.txt",
    container:
        config["container"]
    script:
        "scripts/Microscopy/transform_postIMC_to_postIMS.py"


rule transform_preIMS_to_postIMS:
    threads: 32
    resources:
        mem_mb=100000,
    params:
        input_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        IMC_location_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        output_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMC_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        transform_source="preIMS",
        transform_target="postIMS",
    input:
        postIMC_to_postIMS_transform=choose_postIMC_to_postIMS_transform,
        table_file="results/{project_name}/data/preIMS_location/available_masks.csv",
        postIMC="results/{project_name}/data/preIMS/{project_name}_preIMS.ome.tiff",
        IMC_location=lambda wildcards: f'results/{wildcards.project_name}/data/IMC_location/{wildcards.project_name}_IMC_mask_on_preIMS_{get_column_entry_from_metadata_two_conditions(wildcards.sample,wildcards.project_name, "core_name", "sample_name","project_name", read_sample_metadata(config["sample_metadata"]))}.geojson',
    output:
        postIMC_transformed="results/{project_name}/data/preIMS/{sample}_transformed_on_postIMS.ome.tiff",
    log:
        stdout="logs/transform_preIMC_to_preIMS/{project_name}_{sample}.stdout",
    benchmark:
        "benchmarks/transform_preIMC_to_preIMS/{project_name}_{sample}.txt",
    container:
        config["container"]
    script:
        "scripts/Microscopy/transform_postIMC_to_postIMS.py"


rule downscale_postIMS:
    threads: 4
    resources:
        mem_mb=5000,
    params:
        input_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        output_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
    input:
        postIMS="results/{project_name}/data/postIMS/{project_name}_postIMS.ome.tiff",
        #IMC_transformed=lambda wildcards: expand(
        #    "results/{{project_name}}/data/IMC_mask/{sample}_transformed_on_postIMS.ome.tiff",
        #    sample=get_column_entry_from_metadata(
        #        wildcards.project_name,
        #        "sample_name",
        #        "project_name",
        #        read_sample_metadata(config["sample_metadata"]),
        #        return_all=True,
        #    ),
        #),
    output:
        postIMS_downscaled="results/{project_name}/data/postIMS/{project_name}_postIMS_reduced.ome.tiff",
    log:
        stdout="logs/downscale_postIMS/{project_name}.stdout",
    benchmark:
        "benchmarks/downscale_postIMS/{project_name}.txt",
    container:
        config["container"]
    script:
        "scripts/Microscopy/downscale_image.py"


use rule downscale_postIMS as downscale_preIMS with:
    input:
        postIMS="results/{project_name}/data/preIMS/{project_name}-preIMS_to_postIMS_registered.ome.tiff",
        IMC_transformed=lambda wildcards: expand(
            "results/{{project_name}}/data/IMC_mask/{sample}_transformed_on_postIMS.ome.tiff",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
    output:
        postIMS_downscaled="results/{project_name}/data/preIMS/{project_name}-preIMS_to_postIMS_registered_reduced.ome.tiff",
    log:
        stdout="logs/downscale_preIMS/{project_name}.stdout",
    benchmark:
        "benchmarks/downscale_preIMS/{project_name}.txt",


use rule downscale_postIMS as downscale_preIMC with:
    input:
        postIMS="results/{project_name}/data/preIMC/{project_name}-preIMC_to_postIMS_registered.ome.tiff",
        IMC_transformed=lambda wildcards: expand(
            "results/{{project_name}}/data/IMC_mask/{sample}_transformed_on_postIMS.ome.tiff",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
    output:
        postIMS_downscaled="results/{project_name}/data/preIMC/{project_name}-preIMC_to_postIMS_registered_reduced.ome.tiff",
    log:
        stdout="logs/downscale_preIMC/{project_name}.stdout",
    benchmark:
        "benchmarks/downscale_preIMC/{project_name}.txt",




