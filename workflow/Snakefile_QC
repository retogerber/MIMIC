
rule transform_IMS_core_for_visualization:
    threads: 1
    resources:
        mem_mb=30000,
    params:
        IMS_pixelsize=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMS_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        microscopy_pixelsize=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
    input:
        imzml_coords=choose_imsml_coordsfile,
        imzml_peaks=imzml_peaks_from_sample_and_project,
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"postIMS"),
        IMCmask_on_postIMS="results/{project_name}/data/IMC_mask/{project_name}_IMC_transformed_on_postIMS.ome.tiff",
    output:
        IMS_transformed="results/{project_name}/data/IMS/{project_name}_{sample}_IMS_transformed.ome.tiff",
        IMC_mask_transformed="results/{project_name}/data/IMC_mask/{sample}_transformed_on_postIMS_cropped.ome.tiff",
    log:
        stdout="logs/transform_IMS_core_for_visualization/{project_name}_{sample}.stdout",
    benchmark:
        "benchmarks/transform_IMS_core_for_visualization/{project_name}_{sample}.txt",
    # conda:
    #    "env/image_registration_qc.yaml"
    container:
        config["container"]
    script:
        "scripts/QC/transform_IMS_for_visualization.py"



rule download_sam_weights:
    output:
        "results/Misc/sam_vit_h_4b8939.pth",
    log:
        stdout="logs/download_sam_weights/log.stdout",
        stderr="logs/download_sam_weights/log.stderr",
    # container:
    #    config["container"]
    shell:
        "cd results/Misc && wget https://dl.fbaipublicfiles.com/segment_anything/sam_vit_h_4b8939.pth > ../../{log.stdout} 2> ../../{log.stderr}"

rule image_registration_evaluation_IMC_to_postIMC:
    threads: 4
    resources:
        mem_mb=10000,
    params:
        input_spacing_postIMC=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_IMC_location=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        output_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMC_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        pixel_expansion=501, # should be the same as in rule image_registration_evaluation_extract_regions_SAM_preIMC
    input:
        postIMC="results/{project_name}/data/postIMC/{project_name}_postIMC.ome.tiff",
        IMC_location_on_postIMC=lambda wildcards: f"results/{wildcards.project_name}/data/IMC_location/{wildcards.project_name}_IMC_mask_on_postIMC_{get_column_entry_from_metadata_two_conditions(wildcards.sample, wildcards.project_name, 'core_name', 'sample_name', 'project_name', read_sample_metadata(config['sample_metadata']))}.geojson",
        sam_weights="results/Misc/sam_vit_h_4b8939.pth",
    output:
        IMC_to_postIMC_error="results/{project_name}/data/registration_metric/{sample}_error_metrics_IMC_to_postIMC.json",
        IMC_to_postIMC_error_plot="logs/image_registration_evaluation_IMC_to_postIMC/{project_name}_{sample}.png",
    log:
        stdout="logs/image_registration_evaluation_IMC_to_postIMC/{project_name}_{sample}.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_IMC_to_postIMC/{project_name}_{sample}.txt",
    container:
        config["container"]
    script:
        "scripts/QC/image_registration_evaluation_IMC_to_postIMC.py"


rule image_registration_evaluation_IMC_to_preIMC:
    threads: 4
    resources:
        mem_mb=10000,
    params:
        input_spacing_preIMC=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_IMC=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_IMC_location=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        output_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMC_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        non_tissue_proportion_lower = 0.005,
        non_tissue_proportion_upper = 0.95,
        pixel_expansion=501, # should be the same as in rule image_registration_evaluation_extract_regions_SAM_preIMC
    input:
        preIMC="results/{project_name}/data/preIMC/{project_name}_preIMC.ome.tiff",
        IMC_mask="results/{project_name}/data/IMC_mask/{project_name}_IMC_transformed_on_preIMC.ome.tiff",
        IMC_location_on_preIMC=lambda wildcards: f"results/{wildcards.project_name}/data/IMC_location/{wildcards.project_name}_IMC_mask_on_preIMC_{get_column_entry_from_metadata_two_conditions(wildcards.sample, wildcards.project_name, 'core_name', 'sample_name', 'project_name', read_sample_metadata(config['sample_metadata']))}.geojson",
        sam_weights="results/Misc/sam_vit_h_4b8939.pth",
        contours_in="results/{project_name}/data/preIMC/{sample}_preIMC_landmark_regions.json",
    output:
        IMC_to_preIMC_error="results/{project_name}/data/registration_metric/{sample}_error_metrics_IMC_to_preIMC.json",
        IMC_to_preIMC_error_plot="logs/image_registration_evaluation_IMC_to_preIMC/{project_name}_{sample}.png",
    log:
        stdout="logs/image_registration_evaluation_IMC_to_preIMC/{project_name}_{sample}.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_IMC_to_preIMC/{project_name}_{sample}.txt",
    container:
        config["container"]
    script:
        "scripts/QC/image_registration_evaluation_IMC_to_preIMC.py"


rule image_registration_evaluation_postIMC_to_preIMC:
    threads: 4
    resources:
        mem_mb=20000,
    params:
        input_spacing_1=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_2=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_IMC_location=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        output_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMC_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        max_distance=50,
        min_distance=10,
        remove_postIMS_grid=False,
    input:
        sam_weights="results/Misc/sam_vit_h_4b8939.pth",
        microscopy_image_1="results/{project_name}/data/postIMC/{project_name}_postIMC_transformed_on_preIMC.ome.tiff",
        microscopy_image_2="results/{project_name}/data/preIMC/{project_name}_preIMC.ome.tiff",
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"preIMC"),
    output:
        microscopy_image_out_1="results/{project_name}/data/postIMC/{sample}_transformed_on_preIMC_registration_comparison.ome.tiff",
        microscopy_image_out_2="results/{project_name}/data/preIMC/{sample}_preIMC_registration_comparison.ome.tiff",
        matching_points="results/{project_name}/data/registration_metric/{sample}_landmarks_postIMC_on_preIMC.csv",
        error_stats="results/{project_name}/data/registration_metric/{sample}_error_metrics_postIMC_on_preIMC.json",
    log:
        stdout="logs/image_registration_evaluation_postIMC_to_preIMC/{project_name}_{sample}.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_postIMC_to_preIMC/{project_name}_{sample}.txt",
    container:
        config["container"]
    script:
        "scripts/QC/image_registration_evaluation_core_to_core.py"


use rule image_registration_evaluation_postIMC_to_preIMC as image_registration_evaluation_preIMC_to_preIMS with:
    input:
        sam_weights="results/Misc/sam_vit_h_4b8939.pth",
        microscopy_image_1="results/{project_name}/data/preIMC/{project_name}_preIMC_transformed_on_preIMS.ome.tiff",
        microscopy_image_2="results/{project_name}/data/preIMS/{project_name}_preIMS.ome.tiff",
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"preIMS"),
    output:
        microscopy_image_out_1="results/{project_name}/data/preIMC/{sample}_transformed_on_preIMS_registration_comparison.ome.tiff",
        microscopy_image_out_2="results/{project_name}/data/preIMS/{sample}_preIMS_registration_comparison.ome.tiff",
        matching_points="results/{project_name}/data/registration_metric/{sample}_landmarks_preIMC_on_preIMS.csv",
        error_stats="results/{project_name}/data/registration_metric/{sample}_error_metrics_preIMC_on_preIMS.json",
    log:
        stdout="logs/image_registration_evaluation_preIMC_to_preIMS/{project_name}_{sample}.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_preIMC_to_preIMS/{project_name}_{sample}.txt",


use rule image_registration_evaluation_postIMC_to_preIMC as image_registration_evaluation_preIMS_to_postIMS with:
    params:
        input_spacing_1=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_2=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_IMC_location=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        output_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMC_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        max_distance=50,
        min_distance=10,
        remove_postIMS_grid=True,
    input:
        sam_weights="results/Misc/sam_vit_h_4b8939.pth",
        microscopy_image_1="results/{project_name}/data/preIMS/{project_name}_preIMS_transformed_on_postIMS.ome.tiff",
        microscopy_image_2="results/{project_name}/data/postIMS/{project_name}_postIMS.ome.tiff",
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"postIMS"),
    output:
        microscopy_image_out_1="results/{project_name}/data/preIMS/{sample}_transformed_on_postIMS_registration_comparison.ome.tiff",
        microscopy_image_out_2="results/{project_name}/data/postIMS/{sample}_postIMS_registration_comparison.ome.tiff",
        matching_points="results/{project_name}/data/registration_metric/{sample}_landmarks_preIMS_on_postIMS.csv",
        error_stats="results/{project_name}/data/registration_metric/{sample}_error_metrics_preIMS_on_postIMS.json",
    log:
        stdout="logs/image_registration_evaluation_preIMS_to_postIMS/{project_name}_{sample}.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_preIMS_to_postIMS/{project_name}_{sample}.txt",

use rule image_registration_evaluation_postIMC_to_preIMC as image_registration_evaluation_postIMC_to_postIMS with:
    params:
        input_spacing_1=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_2=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_IMC_location=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        output_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMC_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        max_distance=50,
        min_distance=10,
        remove_postIMS_grid=True,
    input:
        sam_weights="results/Misc/sam_vit_h_4b8939.pth",
        microscopy_image_1="results/{project_name}/data/postIMC/{project_name}_postIMC_transformed_on_postIMS.ome.tiff",
        microscopy_image_2="results/{project_name}/data/postIMS/{project_name}_postIMS.ome.tiff",
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"postIMS"),
    output:
        microscopy_image_out_1="results/{project_name}/data/postIMC/{sample}_transformed_on_postIMS_registration_comparison.ome.tiff",
        microscopy_image_out_2="results/{project_name}/data/postIMS/{sample}_postIMS_to_postIMC_registration_comparison.ome.tiff",
        matching_points="results/{project_name}/data/registration_metric/{sample}_landmarks_postIMC_on_postIMS.csv",
        error_stats="results/{project_name}/data/registration_metric/{sample}_error_metrics_postIMC_on_postIMS.json",
    log:
        stdout="logs/image_registration_evaluation_postIMC_to_postIMS/{project_name}_{sample}.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_postIMC_to_postIMS/{project_name}_{sample}.txt",

rule image_registration_evaluation_preIMS_to_postIMS_sitk:
    threads: 4
    resources:
        mem_mb=50000,
    params:
        input_spacing_1=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_2=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_IMC_location=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        output_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMC_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
    input:
        sam_weights="results/Misc/sam_vit_h_4b8939.pth",
        microscopy_image_1="results/{project_name}/data/preIMS/{project_name}_preIMS_transformed_on_postIMS.ome.tiff",
        microscopy_image_2="results/{project_name}/data/postIMS/{project_name}_postIMS.ome.tiff",
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"postIMS"),
    output:
        registered_out="results/{project_name}/data/registration_metric/{sample}_preIMS_to_postIMS_registration_evaluation.ome.tiff",
        error_stats="results/{project_name}/data/registration_metric/{sample}_error_metrics_preIMS_on_postIMS_sitk.json",
    log:
        stdout="logs/image_registration_evaluation_preIMS_to_postIMS_sitk/{project_name}_{sample}.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_preIMS_to_postIMS_sitk/{project_name}_{sample}.txt",
    container:
        config["container"]
    script:
        "scripts/QC/image_registration_evaluation_preIMS_to_postIMS.py"

rule image_registration_evaluation:
    threads: 4
    resources:
        mem_mb=50000,
    params:
        input_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        rescale = 8,
    input:
        postIMC_on_preIMC="results/{project_name}/data/postIMC/{project_name}_postIMC_transformed_on_preIMC.ome.tiff",
        preIMC="results/{project_name}/data/preIMC/{project_name}_preIMC.ome.tiff",
        TMA_on_preIMC=lambda wildcards: TMA_location_from_project_name_and_sample_name(wildcards,"preIMC"),
        preIMC_on_preIMS="results/{project_name}/data/preIMC/{project_name}_preIMC_transformed_on_preIMS.ome.tiff",
        preIMS="results/{project_name}/data/preIMS/{project_name}_preIMS.ome.tiff",
        TMA_on_preIMS=lambda wildcards: TMA_location_from_project_name_and_sample_name(wildcards,"preIMS"),
        preIMS_on_postIMS="results/{project_name}/data/preIMS/{project_name}_preIMS_transformed_on_postIMS.ome.tiff",
        postIMS="results/{project_name}/data/postIMS/{project_name}_postIMS.ome.tiff",
        TMA_on_postIMS=lambda wildcards: TMA_location_from_project_name_and_sample_name(wildcards,"postIMS"),
        postIMC_on_postIMS="results/{project_name}/data/postIMC/{project_name}_postIMC_transformed_on_postIMS.ome.tiff",
        IMC="results/{project_name}/data/IMC/{sample}.tiff",
        sam_weights="results/Misc/sam_vit_h_4b8939.pth",
    output:
        registration_metrics="results/{project_name}/data/registration_metric/{sample}_reg_metrics.csv",
        postIMCmask_preIMCmask="results/{project_name}/data/registration_metric/{sample}_postIMCmask_preIMCmask_reg_metrics.tiff",
        preIMCmask_preIMSmask="results/{project_name}/data/registration_metric/{sample}_preIMCmask_preIMSmask_reg_metrics.tiff",
        preIMSmask_postIMSmask="results/{project_name}/data/registration_metric/{sample}_preIMSmask_postIMSmask_reg_metrics.tiff",
        postIMCmask_postIMSmask="results/{project_name}/data/registration_metric/{sample}_postIMCmask_postIMSmask_reg_metrics.tiff",
    log:
        stdout="logs/image_registration_evaluation/{project_name}_{sample}.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation/{project_name}_{sample}.txt",
    # conda:
    #    "env/image_registration_qc.yaml"
    container:
        config["container"]
    script:
        "scripts/QC/image_registration_evaluation_SAM.py"

rule image_registration_evaluation_extract_regions_SAM_postIMC:
    threads: 16
    resources:
        mem_mb=20000,
    params:
        input_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_IMC_location=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        output_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMC_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        remove_postIMS_grid=False,
        pixel_expansion=501,
        min_area=1296, # 36**2
        max_area=262144, # 512**2
        region_extraction_method="sam",
        compute_rescale=2,
    input:
        sam_weights="results/Misc/sam_vit_h_4b8939.pth",
        microscopy_image="results/{project_name}/data/postIMC/{project_name}_postIMC.ome.tiff",
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"postIMC"),
    output:
        contours_out="results/{project_name}/data/postIMC/{sample}_postIMC_landmark_regions.json",
    log:
        stdout="logs/image_registration_evaluation_extract_regions_SAM/{project_name}_{sample}_postIMC.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_extract_regions_SAM/{project_name}_{sample}_postIMC.txt",
    container:
        config["container"]
    script:
        "scripts/QC/extract_regions_SAM.py"

use rule image_registration_evaluation_extract_regions_SAM_postIMC as image_registration_evaluation_extract_regions_SAM_preIMC with:
    input:
        sam_weights="results/Misc/sam_vit_h_4b8939.pth",
        microscopy_image="results/{project_name}/data/preIMC/{project_name}_preIMC.ome.tiff",
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"preIMC"),
    output:
        contours_out="results/{project_name}/data/preIMC/{sample}_preIMC_landmark_regions.json",
    log:
        stdout="logs/image_registration_evaluation_extract_regions_SAM/{project_name}_{sample}_preIMC.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_extract_regions_SAM/{project_name}_{sample}_preIMC.txt",

use rule image_registration_evaluation_extract_regions_SAM_postIMC as image_registration_evaluation_extract_regions_SAM_preIMS with:
    input:
        sam_weights="results/Misc/sam_vit_h_4b8939.pth",
        microscopy_image="results/{project_name}/data/preIMS/{project_name}_preIMS.ome.tiff",
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"preIMS"),
    output:
        contours_out="results/{project_name}/data/preIMS/{sample}_preIMS_landmark_regions.json",
    log:
        stdout="logs/image_registration_evaluation_extract_regions_SAM/{project_name}_{sample}_preIMS.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_extract_regions_SAM/{project_name}_{sample}_preIMS.txt",

use rule image_registration_evaluation_extract_regions_SAM_postIMC as image_registration_evaluation_extract_regions_SAM_postIMS with:
    params:
        input_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_IMC_location=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        output_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMC_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        remove_postIMS_grid=True,
        pixel_expansion=501,
        min_area=1296, # 36**2
        max_area=262144, # 512**2
        region_extraction_method="sam",
        compute_rescale=2,
    input:
        sam_weights="results/Misc/sam_vit_h_4b8939.pth",
        microscopy_image="results/{project_name}/data/postIMS/{project_name}_postIMS.ome.tiff",
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"postIMS"),
    output:
        contours_out="results/{project_name}/data/postIMS/{sample}_postIMS_landmark_regions.json",
    log:
        stdout="logs/image_registration_evaluation_extract_regions_SAM/{project_name}_{sample}_postIMS.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_extract_regions_SAM/{project_name}_{sample}_postIMS.txt",

rule image_registration_evaluation_transform_regions_SAM_postIMC_to_preIMC:
    threads: 16
    resources:
        mem_mb=20000,
    params:
        input_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_IMC_location=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        output_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMC_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        pixel_expansion=501,
        min_area=1296, # 36**2
        max_area=262144, # 512**2
        transform_target="preIMC",
        transform_type="shape",
        compute_rescale=2,
    input:
        microscopy_image="results/{project_name}/data/postIMC/{project_name}_postIMC.ome.tiff",
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"postIMC"),
        contours_in="results/{project_name}/data/postIMC/{sample}_postIMC_landmark_regions.json",
        transform_file=choose_postIMC_to_postIMS_transform,
        matching="results/{project_name}/data/preIMC_location/matching_preIMC_location_with_IMC_location.csv",
    output:
        contours_out="results/{project_name}/data/postIMC/{sample}_postIMC_on_preIMC_landmark_regions.json",
    log:
        stdout="logs/image_registration_evaluation_transform_regions/{project_name}_{sample}_postIMC.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_transform_regions/{project_name}_{sample}_postIMC.txt",
    container:
        config["container"]
    script:
        "scripts/QC/transform_regions_SAM.py"

use rule image_registration_evaluation_transform_regions_SAM_postIMC_to_preIMC as image_registration_evaluation_transform_regions_SAM_preIMC_to_preIMS with:
    resources:
        mem_mb=lambda wc, input: 20000 if is_linear_transform(input.transform_file) else 200000,
    params:
        input_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_IMC_location=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        output_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMC_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        pixel_expansion=501,
        min_area=1296, # 36**2
        max_area=262144, # 512**2
        transform_target="preIMS",
        transform_type="shape",
        compute_rescale=2,
        #transform_type="image" # inversion of nonlinear transformation is not robust, use image registration
    input:
        microscopy_image="results/{project_name}/data/preIMC/{project_name}_preIMC.ome.tiff",
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"preIMC"),
        contours_in="results/{project_name}/data/preIMC/{sample}_preIMC_landmark_regions.json",
        transform_file=choose_postIMC_to_postIMS_transform,
        matching="results/{project_name}/data/preIMC_location/matching_preIMC_location_with_IMC_location.csv",
    output:
        contours_out="results/{project_name}/data/preIMC/{sample}_preIMC_on_preIMS_landmark_regions.json",
    log:
        stdout="logs/image_registration_evaluation_transform_regions/{project_name}_{sample}_preIMC.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_transform_regions/{project_name}_{sample}_preIMC.txt",

use rule image_registration_evaluation_transform_regions_SAM_postIMC_to_preIMC as image_registration_evaluation_transform_regions_SAM_preIMS_to_postIMS with:
    params:
        input_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_IMC_location=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        output_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMC_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        pixel_expansion=501,
        min_area=1296, # 36**2
        max_area=262144, # 512**2
        transform_target="postIMS",
        transform_type="image", # inversion of nonlinear transformation is not robust, use image registration
        compute_rescale=2,
    input:
        microscopy_image="results/{project_name}/data/preIMS/{project_name}_preIMS.ome.tiff",
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"preIMS"),
        contours_in="results/{project_name}/data/preIMS/{sample}_preIMS_landmark_regions.json",
        transform_file=choose_postIMC_to_postIMS_transform,
        matching="results/{project_name}/data/preIMC_location/matching_preIMC_location_with_IMC_location.csv",
    output:
        contours_out="results/{project_name}/data/preIMS/{sample}_preIMS_on_postIMS_landmark_regions.json",
    log:
        stdout="logs/image_registration_evaluation_transform_regions/{project_name}_{sample}_preIMS.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_transform_regions/{project_name}_{sample}_preIMS.txt",

use rule image_registration_evaluation_transform_regions_SAM_postIMC_to_preIMC as image_registration_evaluation_transform_regions_SAM_postIMC_to_postIMS with:
    resources:
        mem_mb=lambda wc, input: 20000 if is_linear_transform(input.transform_file) else 200000,
    params:
        input_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_IMC_location=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        output_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMC_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        pixel_expansion=501,
        min_area=1296, # 36**2
        max_area=262144, # 512**2
        transform_target="postIMS",
        transform_type="image", # inversion of nonlinear transformation is not robust, use image registration
        compute_rescale=2,
    input:
        microscopy_image="results/{project_name}/data/postIMC/{project_name}_postIMC.ome.tiff",
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"postIMC"),
        contours_in="results/{project_name}/data/postIMC/{sample}_postIMC_landmark_regions.json",
        transform_file=choose_postIMC_to_postIMS_transform,
        matching="results/{project_name}/data/preIMC_location/matching_preIMC_location_with_IMC_location.csv",
    output:
        contours_out="results/{project_name}/data/postIMC/{sample}_postIMC_on_postIMS_landmark_regions.json",
    log:
        stdout="logs/image_registration_evaluation_transform_regions/{project_name}_{sample}_postIMC_to_postIMS.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_transform_regions/{project_name}_{sample}_postIMC_to_postIMS.txt",


rule image_registration_evaluation_compare_regions_postIMC_to_preIMC:
    threads: 16
    resources:
        mem_mb=20000,
    params:
        input_spacing_1=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_2=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_IMC_location=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        output_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMC_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        pixel_expansion=501,
        max_distance=50,
        min_distance=10,
    input:
        microscopy_image_1="results/{project_name}/data/postIMC/{project_name}_postIMC_transformed_on_preIMC.ome.tiff",
        microscopy_image_2="results/{project_name}/data/preIMC/{project_name}_preIMC.ome.tiff",
        contours_in_1="results/{project_name}/data/postIMC/{sample}_postIMC_on_preIMC_landmark_regions.json",
        contours_in_2="results/{project_name}/data/preIMC/{sample}_preIMC_landmark_regions.json",
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"preIMC"),
    output:
        overlap_image="results/{project_name}/data/registration_metric/{sample}_postIMC_and_preIMC_landmark_regions.png",
        error_stats="results/{project_name}/data/registration_metric/{sample}_error_metrics_regions_postIMC_on_preIMC.json",
    log:
        stdout="logs/image_registration_evaluation_compare_regions_postIMC_to_preIMC/{project_name}_{sample}_postIMC.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_compare_regions_postIMC_to_preIMC/{project_name}_{sample}_postIMC.txt",
    container:
        config["container"]
    script:
        "scripts/QC/compare_regions_SAM.py"


use rule image_registration_evaluation_compare_regions_postIMC_to_preIMC as image_registration_evaluation_compare_regions_preIMC_to_preIMS with:
    input:
        microscopy_image_1="results/{project_name}/data/preIMC/{project_name}_preIMC_transformed_on_preIMS.ome.tiff",
        microscopy_image_2="results/{project_name}/data/preIMS/{project_name}_preIMS.ome.tiff",
        contours_in_1="results/{project_name}/data/preIMC/{sample}_preIMC_on_preIMS_landmark_regions.json",
        contours_in_2="results/{project_name}/data/preIMS/{sample}_preIMS_landmark_regions.json",
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"preIMS"),
    output:
        overlap_image="results/{project_name}/data/registration_metric/{sample}_preIMC_and_preIMS_landmark_regions.png",
        error_stats="results/{project_name}/data/registration_metric/{sample}_error_metrics_regions_preIMC_on_preIMS.json",
    log:
        stdout="logs/image_registration_evaluation_compare_regions_preIMC_to_preIMS/{project_name}_{sample}_preIMC.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_compare_regions_preIMC_to_preIMS/{project_name}_{sample}_preIMC.txt",

use rule image_registration_evaluation_compare_regions_postIMC_to_preIMC as image_registration_evaluation_compare_regions_preIMS_to_postIMS with:
    input:
        microscopy_image_1="results/{project_name}/data/preIMS/{project_name}_preIMS_transformed_on_postIMS.ome.tiff",
        microscopy_image_2="results/{project_name}/data/postIMS/{project_name}_postIMS.ome.tiff",
        contours_in_1="results/{project_name}/data/preIMS/{sample}_preIMS_on_postIMS_landmark_regions.json",
        contours_in_2="results/{project_name}/data/postIMS/{sample}_postIMS_landmark_regions.json",
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"postIMS"),
    output:
        overlap_image="results/{project_name}/data/registration_metric/{sample}_preIMS_and_postIMS_landmark_regions.png",
        error_stats="results/{project_name}/data/registration_metric/{sample}_error_metrics_regions_preIMS_on_postIMS.json",
    log:
        stdout="logs/image_registration_evaluation_compare_regions_preIMS_to_postIMS/{project_name}_{sample}_preIMS.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_compare_regions_preIMS_to_postIMS/{project_name}_{sample}_preIMS.txt",

use rule image_registration_evaluation_compare_regions_postIMC_to_preIMC as image_registration_evaluation_compare_regions_postIMC_to_postIMS with:
    input:
        microscopy_image_1="results/{project_name}/data/postIMC/{project_name}_postIMC_transformed_on_postIMS.ome.tiff",
        microscopy_image_2="results/{project_name}/data/postIMS/{project_name}_postIMS.ome.tiff",
        contours_in_1="results/{project_name}/data/postIMC/{sample}_postIMC_on_postIMS_landmark_regions.json",
        contours_in_2="results/{project_name}/data/postIMS/{sample}_postIMS_landmark_regions.json",
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"postIMS"),
    output:
        overlap_image="results/{project_name}/data/registration_metric/{sample}_postIMC_and_postIMS_landmark_regions.png",
        error_stats="results/{project_name}/data/registration_metric/{sample}_error_metrics_regions_postIMC_on_postIMS.json",
    log:
        stdout="logs/image_registration_evaluation_compare_regions_postIMC_to_postIMS/{project_name}_{sample}_preIMS.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_compare_regions_postIMC_to_postIMS/{project_name}_{sample}_preIMS.txt",

rule image_registration_evaluation_calculate_global_metrics_postIMC_to_preIMC:
    threads: 1
    resources:
        mem_mb=2000,
    params:
        input_spacing_1=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_2=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_IMC_location=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        output_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMC_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
    input:
        microscopy_image_1="results/{project_name}/data/postIMC/{project_name}_postIMC_transformed_on_preIMC.ome.tiff",
        microscopy_image_2="results/{project_name}/data/preIMC/{project_name}_preIMC.ome.tiff",
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"preIMC"),
    output:
        error_stats="results/{project_name}/data/registration_metric/{sample}_global_error_metrics_postIMC_on_preIMC.json",
    log:
        stdout="logs/image_registration_evaluation_calculate_global_metrics_postIMC_to_preIMC/{project_name}_{sample}_postIMC.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_calculate_global_metrics_postIMC_to_preIMC/{project_name}_{sample}_postIMC.txt",
    container:
        config["container"]
    script:
        "scripts/QC/image_registration_evaluation_microscopy_metrics.py"

use rule image_registration_evaluation_calculate_global_metrics_postIMC_to_preIMC as image_registration_evaluation_calculate_global_metrics_preIMC_to_preIMS with:
    input:
        microscopy_image_1="results/{project_name}/data/preIMC/{project_name}_preIMC_transformed_on_preIMS.ome.tiff",
        microscopy_image_2="results/{project_name}/data/preIMS/{project_name}_preIMS.ome.tiff",
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"preIMS"),
    output:
        error_stats="results/{project_name}/data/registration_metric/{sample}_global_error_metrics_preIMC_on_preIMS.json",
    log:
        stdout="logs/image_registration_evaluation_calculate_global_metrics_preIMC_to_preIMS/{project_name}_{sample}_preIMC.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_calculate_global_metrics_preIMC_to_preIMS/{project_name}_{sample}_preIMC.txt",

use rule image_registration_evaluation_calculate_global_metrics_postIMC_to_preIMC as image_registration_evaluation_calculate_global_metrics_preIMS_to_postIMS with:
    input:
        microscopy_image_1="results/{project_name}/data/preIMS/{project_name}_preIMS_transformed_on_postIMS.ome.tiff",
        microscopy_image_2="results/{project_name}/data/postIMS/{project_name}_postIMS.ome.tiff",
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"postIMS"),
    output:
        error_stats="results/{project_name}/data/registration_metric/{sample}_global_error_metrics_preIMS_on_postIMS.json",
    log:
        stdout="logs/image_registration_evaluation_calculate_global_metrics_preIMS_to_postIMS/{project_name}_{sample}_preIMS.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_calculate_global_metrics_preIMS_to_postIMS/{project_name}_{sample}_preIMS.txt",

use rule image_registration_evaluation_calculate_global_metrics_postIMC_to_preIMC as image_registration_evaluation_calculate_global_metrics_postIMC_to_postIMS with:
    input:
        microscopy_image_1="results/{project_name}/data/postIMC/{project_name}_postIMC_transformed_on_postIMS.ome.tiff",
        microscopy_image_2="results/{project_name}/data/postIMS/{project_name}_postIMS.ome.tiff",
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"postIMS"),
    output:
        error_stats="results/{project_name}/data/registration_metric/{sample}_global_error_metrics_postIMC_on_postIMS.json",
    log:
        stdout="logs/image_registration_evaluation_calculate_global_metrics_postIMC_to_postIMS/{project_name}_{sample}_postIMC.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_calculate_global_metrics_postIMC_to_postIMS/{project_name}_{sample}_postIMC.txt",



rule image_registration_evaluation_create_blending_gif_postIMC_to_preIMC:
    threads: 1
    resources:
        mem_mb=2000,
    params:
        input_spacing_1=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_2=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_IMC_location=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        output_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMC_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        pixel_expansion=101,
        remove_postIMS_grid=False,
    input:
        microscopy_image_1="results/{project_name}/data/postIMC/{project_name}_postIMC_transformed_on_preIMC.ome.tiff",
        microscopy_image_2="results/{project_name}/data/preIMC/{project_name}_preIMC.ome.tiff",
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"preIMC"),
    output:
        gif_file="results/{project_name}/data/registration_metric/report/{sample}_postIMC_preIMC.gif",
    log:
        stdout="logs/image_registration_evaluation_create_blending_gif_postIMC_to_preIMC/{project_name}_{sample}_postIMC_preIMC.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_create_blending_gif_postIMC_to_preIMC/{project_name}_{sample}_postIMC_preIMC.txt",
    container:
        config["container"]
    script:
        "scripts/QC/image_registration_evaluation_create_blending_gif.py"

use rule image_registration_evaluation_create_blending_gif_postIMC_to_preIMC as image_registration_evaluation_create_blending_gif_preIMC_to_preIMS with:
    input:
        microscopy_image_1="results/{project_name}/data/preIMC/{project_name}_preIMC_transformed_on_preIMS.ome.tiff",
        microscopy_image_2="results/{project_name}/data/preIMS/{project_name}_preIMS.ome.tiff",
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"preIMS"),
    output:
        gif_file="results/{project_name}/data/registration_metric/report/{sample}_preIMC_preIMS.gif",
    log:
        stdout="logs/image_registration_evaluation_create_blending_gif_preIMC_to_preIMS/{project_name}_{sample}_preIMC_preIMS.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_create_blending_gif_preIMC_to_preIMS/{project_name}_{sample}_preIMC_preIMS.txt",

use rule image_registration_evaluation_create_blending_gif_postIMC_to_preIMC as image_registration_evaluation_create_blending_gif_preIMS_to_postIMS with:
    params:
        input_spacing_1=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_2=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_IMC_location=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        output_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMC_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        pixel_expansion=101,
        remove_postIMS_grid=True,
    input:
        microscopy_image_1="results/{project_name}/data/preIMS/{project_name}_preIMS_transformed_on_postIMS.ome.tiff",
        microscopy_image_2="results/{project_name}/data/postIMS/{project_name}_postIMS.ome.tiff",
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"postIMS"),
    output:
        gif_file="results/{project_name}/data/registration_metric/report/{sample}_preIMS_postIMS.gif",
    log:
        stdout="logs/image_registration_evaluation_create_blending_gif_preIMS_to_postIMS/{project_name}_{sample}_preIMS_postIMS.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_create_blending_gif_preIMS_to_postIMS/{project_name}_{sample}_preIMS_postIMS.txt",

use rule image_registration_evaluation_create_blending_gif_postIMC_to_preIMC as image_registration_evaluation_create_blending_gif_postIMC_to_postIMS with:
    params:
        input_spacing_1=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_2=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        input_spacing_IMC_location=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        output_spacing=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMC_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        pixel_expansion=101,
        remove_postIMS_grid=True,
    input:
        microscopy_image_1="results/{project_name}/data/postIMC/{project_name}_postIMC_transformed_on_postIMS.ome.tiff",
        microscopy_image_2="results/{project_name}/data/postIMS/{project_name}_postIMS.ome.tiff",
        IMC_location=lambda wildcards: IMC_location_from_project_name_and_sample_name(wildcards,"postIMS"),
    output:
        gif_file="results/{project_name}/data/registration_metric/report/{sample}_postIMC_postIMS.gif",
    log:
        stdout="logs/image_registration_evaluation_create_blending_gif_postIMC_to_postIMS/{project_name}_{sample}_postIMC_postIMS.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_create_blending_gif_postIMC_to_postIMS/{project_name}_{sample}_postIMC_postIMS.txt",




rule image_registration_evaluation_IMS_to_postIMS:
    threads: 1
    resources:
        mem_mb=10000,
    params:
        IMS_pixelsize=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMS_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        IMC_pixelsize=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "microscopy_pixel_size",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
        IMS_shrink_factor=lambda wildcards: get_column_entry_from_metadata(
            wildcards.project_name,
            "IMS_shrink_factor",
            "project_name",
            read_sample_metadata(config["sample_metadata"]),
        ),
    input:
        postIMS_ablation_centroids="results/{project_name}/data/registration_metric/{sample}_postIMS_ablation_centroids.csv",
        metadata="results/{project_name}/data/registration_metric/{sample}_step1_metadata.json",
        imsml_coords_fp=choose_imsml_coordsfile,
        IMCmask="results/{project_name}/data/IMC_mask/{project_name}_IMC_transformed_on_postIMS.ome.tiff",
        imsmicrolink_meta=choose_imsml_metafile,
    output:
        IMS_to_postIMS_error="results/{project_name}/data/registration_metric/{sample}_IMS_to_postIMS_reg_metrics.json",
    log:
        stdout="logs/image_registration_evaluation_IMS_to_postIMS/{project_name}_{sample}.stdout",
    benchmark:
        "benchmarks/image_registration_evaluation_IMS_to_postIMS/{project_name}_{sample}.txt",
    container:
        config["container"]
    script:
        "scripts/QC/image_registration_evaluation_microlink.py"

rule combine_image_registration_evaluation_results:
    params:
        generic_input=config["generic_input"],
    input:
        registration_metrics=lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/{sample}_reg_metrics.csv",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "masks" in config["QC_metrics"]
        ),
        IMS_to_postIMS_error=lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/{sample}_IMS_to_postIMS_reg_metrics.json",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "landmarks" in config["QC_metrics"] and "IMS_to_postIMS" in config["QC_steps"]
        ),
        postIMC_to_preIMC_error=lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/{sample}_error_metrics_postIMC_on_preIMC.json",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "landmarks" in config["QC_metrics"] and "postIMC_to_preIMC" in config["QC_steps"]
        ),
        preIMC_to_preIMS_error=lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/{sample}_error_metrics_preIMC_on_preIMS.json",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "landmarks" in config["QC_metrics"] and "preIMC_to_preIMS" in config["QC_steps"]
        ),
        preIMS_to_postIMS_error=lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/{sample}_error_metrics_preIMS_on_postIMS.json",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "landmarks" in config["QC_metrics"] and "preIMS_to_postIMS" in config["QC_steps"]
        ),
        postIMC_to_postIMS_error=lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/{sample}_error_metrics_postIMC_on_postIMS.json",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "landmarks" in config["QC_metrics"] and "postIMC_to_postIMS" in config["QC_steps"]
        ),
        preIMS_to_postIMS_sitk_error=lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/{sample}_error_metrics_preIMS_on_postIMS_sitk.json",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "sitk" in config["QC_metrics"] and "preIMS_to_postIMS" in config["QC_steps"]
        ),
        postIMC_to_preIMC_region_error=lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/{sample}_error_metrics_regions_postIMC_on_preIMC.json",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "regions" in config["QC_metrics"] and "postIMC_to_preIMC" in config["QC_steps"]
        ),
        preIMC_to_preIMS_region_error=lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/{sample}_error_metrics_regions_preIMC_on_preIMS.json",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "regions" in config["QC_metrics"] and "preIMC_to_preIMS" in config["QC_steps"]
        ),
        preIMS_to_postIMS_region_error=lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/{sample}_error_metrics_regions_preIMS_on_postIMS.json",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "regions" in config["QC_metrics"] and "preIMS_to_postIMS" in config["QC_steps"]
        ),
        postIMC_to_postIMS_region_error=lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/{sample}_error_metrics_regions_postIMC_on_postIMS.json",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "regions" in config["QC_metrics"] and "postIMC_to_postIMS" in config["QC_steps"]
        ),
        postIMC_to_postIMS_global_metrics=lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/{sample}_global_error_metrics_postIMC_on_postIMS.json",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "intensities" in config["QC_metrics"] and "postIMC_to_postIMS" in config["QC_steps"]
        ),
        postIMC_to_preIMC_global_metrics=lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/{sample}_global_error_metrics_postIMC_on_preIMC.json",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "intensities" in config["QC_metrics"] and "postIMC_to_preIMC" in config["QC_steps"]
        ),
        preIMC_to_preIMS_global_metrics=lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/{sample}_global_error_metrics_preIMC_on_preIMS.json",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "intensities" in config["QC_metrics"] and "preIMC_to_preIMS" in config["QC_steps"]
        ),
        preIMS_to_postIMS_global_metrics=lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/{sample}_global_error_metrics_preIMS_on_postIMS.json",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "intensities" in config["QC_metrics"] and "preIMS_to_postIMS" in config["QC_steps"]
        ),
        IMC_to_preIMC_error=lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/{sample}_error_metrics_IMC_to_preIMC.json",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "IMC_to_postIMC" in config["QC_steps"]
        ),
        IMC_to_postIMC_error=lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/{sample}_error_metrics_IMC_to_postIMC.json",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "IMC_to_postIMC" in config["QC_steps"]
        ),
    output:
        registration_metrics_combined="results/{project_name}/data/registration_metric/{project_name}_reg_metrics_combined.csv",
    log:
        stdout="logs/combine_image_registration_evaluation_results/{project_name}.stdout",
    container:
        config["container"]
    script:
        "scripts/QC/combine_registration_evaluation_results.py"


rule visualize_image_registration_evaluation_IMS_to_postIMS:
    threads: 1
    resources:
        mem_mb=2000,
    params:
        vis_type="IMS_to_postIMS",
    input:
        registration_metrics_combined="results/{project_name}/data/registration_metric/{project_name}_reg_metrics_combined.csv",
    output:
        vis_plot="results/{project_name}/data/registration_metric/IMS_to_postIMS_visualization_plot.html",
    log:
        stdout="logs/visualize_image_registration_evaluation_IMS_to_postIMS/{project_name}.stdout",
    container:
        config["container"]
    script:
        "scripts/QC/visualize_IMS_to_postIMS_error.R"


use rule visualize_image_registration_evaluation_IMS_to_postIMS as visualize_image_registration_evaluation_postIMC_to_preIMC with:
    params:
        vis_type="postIMC_to_preIMC",
    output:
        vis_plot="results/{project_name}/data/registration_metric/postIMC_to_preIMC_visualization_plot.html",
    log:
        stdout="logs/visualize_image_registration_evaluation_postIMC_to_preIMC/{project_name}.stdout",


use rule visualize_image_registration_evaluation_IMS_to_postIMS as visualize_image_registration_evaluation_preIMC_to_preIMS with:
    params:
        vis_type="preIMC_to_preIMS",
    output:
        vis_plot="results/{project_name}/data/registration_metric/preIMC_to_preIMS_visualization_plot.html",
    log:
        stdout="logs/visualize_image_registration_evaluation_preIMC_to_preIMS/{project_name}.stdout",


use rule visualize_image_registration_evaluation_IMS_to_postIMS as visualize_image_registration_evaluation_preIMS_to_postIMS with:
    params:
        vis_type="preIMS_to_postIMS",
    output:
        vis_plot="results/{project_name}/data/registration_metric/preIMS_to_postIMS_visualization_plot.html",
    log:
        stdout="logs/visualize_image_registration_evaluation_preIMS_to_postIMS/{project_name}.stdout",

rule visualize_image_registration_evaluation_preIMS_to_postIMS_sitk:
    threads: 1
    resources:
        mem_mb=2000,
    params:
        vis_type="preIMS_to_postIMS",
    input:
        registration_metrics_combined="results/{project_name}/data/registration_metric/{project_name}_reg_metrics_combined.csv",
    output:
        vis_plot="results/{project_name}/data/registration_metric/preIMS_to_postIMS_sitk_visualization_plot.html",
    log:
        stdout="logs/visualize_image_registration_evaluation_IMS_to_postIMS/{project_name}.stdout",
    container:
        config["container"]
    script:
        "scripts/QC/visualize_preIMS_to_postIMS_error.R"


rule convert_to_png_and_downscale_IMS_to_postIMS:
    threads: 1
    resources:
        mem_mb=1000
    params:
        downscale_factor=4
    input:
        input_image="results/{project_name}/data/registration_metric/{sample}_IMS_to_postIMS_reg_metrics_auto.ome.tiff"
        #geojson
    output:
        output_image="results/{project_name}/data/registration_metric/report/{sample}_IMS_to_postIMS_reg_metrics_auto.png"
    log:
        stdout="logs/convert_image_to_png_and_downscale/{project_name}_{sample}.stdout",
    container:
        config["container"]
    script:
        "scripts/QC/convert_to_png_and_downscale.py"


use rule convert_to_png_and_downscale_IMS_to_postIMS as convert_to_png_and_downscale_preIMSmask_to_postIMSmask with:
    params:
        downscale_factor=4
    input:
        input_image="results/{project_name}/data/registration_metric/{sample}_preIMSmask_postIMSmask_reg_metrics.tiff",
    output:
        output_image="results/{project_name}/data/registration_metric/report/{sample}_preIMSmask_to_postIMSmask.png"

use rule convert_to_png_and_downscale_IMS_to_postIMS as convert_to_png_and_downscale_preIMCmask_to_preIMSmask with:
    params:
        downscale_factor=4
    input:
        input_image="results/{project_name}/data/registration_metric/{sample}_preIMCmask_preIMSmask_reg_metrics.tiff",
    output:
        output_image="results/{project_name}/data/registration_metric/report/{sample}_preIMCmask_to_preIMSmask.png"

use rule convert_to_png_and_downscale_IMS_to_postIMS as convert_to_png_and_downscale_postIMCmask_to_preIMCmask with:
    params:
        downscale_factor=4
    input:
        input_image="results/{project_name}/data/registration_metric/{sample}_postIMCmask_preIMCmask_reg_metrics.tiff",
    output:
        output_image="results/{project_name}/data/registration_metric/report/{sample}_postIMCmask_to_preIMCmask.png"

use rule convert_to_png_and_downscale_IMS_to_postIMS as convert_to_png_and_downscale_postIMCmask_to_postIMSmask with:
    params:
        downscale_factor=4
    input:
        input_image="results/{project_name}/data/registration_metric/{sample}_postIMCmask_postIMSmask_reg_metrics.tiff",
    output:
        output_image="results/{project_name}/data/registration_metric/report/{sample}_postIMCmask_to_postIMSmask.png"


use rule convert_to_png_and_downscale_IMS_to_postIMS as convert_to_png_and_downscale_landmarks_postIMC_on_preIMC with:
    params:
        downscale_factor=2
    input:
        input_image="results/{project_name}/data/postIMC/{sample}_transformed_on_preIMC_registration_comparison.ome.tiff",
    output:
        output_image="results/{project_name}/data/registration_metric/report/{sample}_postIMC_transformed_on_preIMC_registration_comparison.png",

use rule convert_to_png_and_downscale_IMS_to_postIMS as convert_to_png_and_downscale_landmarks_preIMC with:
    params:
        downscale_factor=1
    input:
        input_image="results/{project_name}/data/preIMC/{sample}_preIMC_registration_comparison.ome.tiff",
    output:
        output_image="results/{project_name}/data/registration_metric/report/{sample}_preIMC_registration_comparison.png",

use rule convert_to_png_and_downscale_IMS_to_postIMS as convert_to_png_and_downscale_landmarks_preIMC_on_preIMS with:
    params:
        downscale_factor=1
    input:
        input_image="results/{project_name}/data/preIMC/{sample}_transformed_on_preIMS_registration_comparison.ome.tiff",
    output:
        output_image="results/{project_name}/data/registration_metric/report/{sample}_preIMC_transformed_on_preIMS_registration_comparison.png",

use rule convert_to_png_and_downscale_IMS_to_postIMS as convert_to_png_and_downscale_landmarks_preIMS with:
    params:
        downscale_factor=1
    input:
        input_image="results/{project_name}/data/preIMS/{sample}_preIMS_registration_comparison.ome.tiff",
    output:
        output_image="results/{project_name}/data/registration_metric/report/{sample}_preIMS_registration_comparison.png",

use rule convert_to_png_and_downscale_IMS_to_postIMS as convert_to_png_and_downscale_landmarks_preIMS_on_postIMS with:
    params:
        downscale_factor=1
    input:
        input_image="results/{project_name}/data/preIMS/{sample}_transformed_on_postIMS_registration_comparison.ome.tiff",
    output:
        output_image="results/{project_name}/data/registration_metric/report/{sample}_preIMS_transformed_on_postIMS_registration_comparison.png",

use rule convert_to_png_and_downscale_IMS_to_postIMS as convert_to_png_and_downscale_landmarks_postIMS with:
    params:
        downscale_factor=1
    input:
        input_image="results/{project_name}/data/postIMS/{sample}_postIMS_registration_comparison.ome.tiff",
    output:
        output_image="results/{project_name}/data/registration_metric/report/{sample}_postIMS_registration_comparison.png",

use rule convert_to_png_and_downscale_IMS_to_postIMS as convert_to_png_and_downscale_landmarks_postIMC_on_postIMS with:
    params:
        downscale_factor=1
    input:
        input_image="results/{project_name}/data/postIMC/{sample}_transformed_on_postIMS_registration_comparison.ome.tiff",
    output:
        output_image="results/{project_name}/data/registration_metric/report/{sample}_postIMC_transformed_on_postIMS_registration_comparison.png",

use rule convert_to_png_and_downscale_IMS_to_postIMS as convert_to_png_and_downscale_landmarks_postIMS_to_postIMC with:
    params:
        downscale_factor=1
    input:
        input_image="results/{project_name}/data/postIMS/{sample}_postIMS_to_postIMC_registration_comparison.ome.tiff",
    output:
        output_image="results/{project_name}/data/registration_metric/report/{sample}_postIMS_to_postIMC_registration_comparison.png",

rule symlink_IMS_to_postIMS_svg:
    input:
        input_image="logs/register_IMS_to_postIMS_single_core_2/{project_name}_{sample}_combined_registration_all.svg",
    output:
        output_image="results/{project_name}/data/registration_metric/report/{project_name}_{sample}_IMS_to_postIMS_combined_registration_all.svg",
    log:
        stdout="logs/symlink_IMS_to_postIMS_svg/{project_name}_{sample}.stdout",
    container:
        config["container"]
    shell:
        "ln -sr -T {input.input_image} {output.output_image} > {log.stdout} 2> {log.stdout}"

use rule symlink_IMS_to_postIMS_svg as symlink_postIMC_to_preIMC_region_mask with:
    input:
        input_image="results/{project_name}/data/registration_metric/{sample}_postIMC_and_preIMC_landmark_regions.png",
    output:
        output_image="results/{project_name}/data/registration_metric/report/{sample}_postIMC_and_preIMC_landmark_regions.png",
    log:
        stdout="logs/symlink_postIMC_to_preIMC_region_mask/{project_name}_{sample}.stdout",

use rule symlink_IMS_to_postIMS_svg as symlink_preIMC_to_preIMS_region_mask with:
    input:
        input_image="results/{project_name}/data/registration_metric/{sample}_preIMC_and_preIMS_landmark_regions.png",
    output:
        output_image="results/{project_name}/data/registration_metric/report/{sample}_preIMC_and_preIMS_landmark_regions.png",
    log:
        stdout="logs/symlink_preIMC_to_preIMS_region_mask/{project_name}_{sample}.stdout",

use rule symlink_IMS_to_postIMS_svg as symlink_preIMS_to_postIMS_region_mask with:
    input:
        input_image="results/{project_name}/data/registration_metric/{sample}_preIMS_and_postIMS_landmark_regions.png",
    output:
        output_image="results/{project_name}/data/registration_metric/report/{sample}_preIMS_and_postIMS_landmark_regions.png",
    log:
        stdout="logs/symlink_preIMS_to_postIMS_region_mask/{project_name}_{sample}.stdout",

use rule symlink_IMS_to_postIMS_svg as symlink_postIMC_to_postIMS_region_mask with:
    input:
        input_image="results/{project_name}/data/registration_metric/{sample}_postIMC_and_postIMS_landmark_regions.png",
    output:
        output_image="results/{project_name}/data/registration_metric/report/{sample}_postIMC_and_postIMS_landmark_regions.png",
    log:
        stdout="logs/symlink_postIMC_to_postIMS_region_mask/{project_name}_{sample}.stdout",

use rule convert_to_png_and_downscale_IMS_to_postIMS as convert_to_png_and_downscale_IMC_location_from_postIMC with:
    params:
        downscale_factor=1
    input:
        input_image="logs/IMC_location_from_postIMC/{project_name}_{core}.ome.tiff",
    output:
        output_image="results/{project_name}/data/registration_metric/report/{project_name}_IMC_{core}.png",
    log:
        stdout="logs/convert_image_to_png_and_downscale/{project_name}_{core}.stdout",

rule symlink_IMC_to_preIMC_plot:
    input:
        input_image="logs/image_registration_evaluation_IMC_to_preIMC/{project_name}_{sample}.png",
    output:
        output_image="results/{project_name}/data/registration_metric/report/{project_name}_{sample}_IMC_to_preIMC_plot.png",
    log:
        stdout="logs/symlink_IMC_to_preIMC_plot/{project_name}_{sample}.stdout",
    container:
        config["container"]
    shell:
        "ln -sr -T {input.input_image} {output.output_image} > {log.stdout} 2> {log.stdout}"




rule generate_registration_report:
    threads: 1
    resources:
        mem_mb=2000
    params:
        generic_input=config["generic_input"],
        QC_metrics=lambda w: config["QC_metrics"],
        QC_steps=lambda w: config["QC_steps"],
    input:
        registration_metrics_combined="results/{project_name}/data/registration_metric/{project_name}_reg_metrics_combined.csv",
        IMS_to_postIMS_svg = choose_IMS_to_postIMS_svg,
        preIMSmask_to_postIMSmask_png = lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/report/{sample}_preIMSmask_to_postIMSmask.png", 
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "masks" in config["QC_metrics"] and "preIMS_to_postIMS" in config["QC_steps"]
        ),
        preIMCmask_to_preIMSmask_png = lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/report/{sample}_preIMCmask_to_preIMSmask.png", 
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "masks" in config["QC_metrics"] and "preIMC_to_preIMS" in config["QC_steps"]
        ),
        postIMCmask_to_preIMCmask_png = lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/report/{sample}_postIMCmask_to_preIMCmask.png", 
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "masks" in config["QC_metrics"] and "postIMC_to_preIMC" in config["QC_steps"]
        ),
        postIMCmask_to_postIMSmask_png = lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/report/{sample}_postIMCmask_to_postIMSmask.png", 
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "masks" in config["QC_metrics"] and "postIMC_to_postIMS" in config["QC_steps"]
        ),
        landmarks_postIMC_transformed_on_preIMC_png = lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/report/{sample}_postIMC_transformed_on_preIMC_registration_comparison.png",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "landmarks" in config["QC_metrics"] and "postIMC_to_preIMC" in config["QC_steps"]
        ),
        landmarks_preIMC_png = lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/report/{sample}_preIMC_registration_comparison.png",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "landmarks" in config["QC_metrics"] and "postIMC_to_preIMC" in config["QC_steps"]
        ),
        landmarks_preIMC_transformed_on_preIMS_png = lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/report/{sample}_preIMC_transformed_on_preIMS_registration_comparison.png",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "landmarks" in config["QC_metrics"] and "preIMC_to_preIMS" in config["QC_steps"]
        ),
        landmarks_preIMS_png = lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/report/{sample}_preIMS_registration_comparison.png",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "landmarks" in config["QC_metrics"] and "preIMC_to_preIMS" in config["QC_steps"]
        ),
        landmarks_preIMS_transformed_on_postIMS_png = lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/report/{sample}_preIMS_transformed_on_postIMS_registration_comparison.png",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "landmarks" in config["QC_metrics"] and "preIMS_to_postIMS" in config["QC_steps"]
        ),
        landmarks_postIMS_png = lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/report/{sample}_postIMS_registration_comparison.png",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "landmarks" in config["QC_metrics"] and "preIMS_to_postIMS" in config["QC_steps"]
        ),
        landmarks_postIMC_transformed_on_postIMS_png = lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/report/{sample}_postIMC_transformed_on_postIMS_registration_comparison.png",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "landmarks" in config["QC_metrics"] and "postIMC_to_postIMS" in config["QC_steps"]
        ),
        landmarks_postIMS_to_postIMC_png = lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/report/{sample}_postIMS_to_postIMC_registration_comparison.png",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "landmarks" in config["QC_metrics"] and "postIMC_to_postIMS" in config["QC_steps"]
        ),
        regions_postIMC_transformed_on_preIMC_png = lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/report/{sample}_postIMC_and_preIMC_landmark_regions.png",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "regions" in config["QC_metrics"] and "postIMC_to_preIMC" in config["QC_steps"]
        ),
        regions_preIMC_transformed_on_preIMS_png = lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/report/{sample}_preIMC_and_preIMS_landmark_regions.png",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "regions" in config["QC_metrics"] and "preIMC_to_preIMS" in config["QC_steps"]
        ),
        regions_preIMS_transformed_on_postIMS_png = lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/report/{sample}_preIMS_and_postIMS_landmark_regions.png",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "regions" in config["QC_metrics"] and "preIMS_to_postIMS" in config["QC_steps"]
        ),
        regions_postIMC_transformed_on_postIMS_png = lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/report/{sample}_postIMC_and_postIMS_landmark_regions.png",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "regions" in config["QC_metrics"] and "postIMC_to_postIMS" in config["QC_steps"]
        ),
        gif_postIMC_preIMC = lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/report/{sample}_postIMC_preIMC.gif",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "images" in config["QC_metrics"] and "postIMC_to_preIMC" in config["QC_steps"]
        ),
        gif_preIMC_preIMS = lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/report/{sample}_preIMC_preIMS.gif",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "images" in config["QC_metrics"] and "preIMC_to_preIMS" in config["QC_steps"]
        ),
        gif_preIMS_postIMS = lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/report/{sample}_preIMS_postIMS.gif",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "images" in config["QC_metrics"] and "preIMS_to_postIMS" in config["QC_steps"]
        ),
        gif_postIMC_postIMS = lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/report/{sample}_postIMC_postIMS.gif",
            sample=get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "images" in config["QC_metrics"] and "postIMC_to_postIMS" in config["QC_steps"]
        ),
        IMC_location_extraction_image = lambda wildcards: return_file_or_generic(
            expand(
            "results/{{project_name}}/data/registration_metric/report/{{project_name}}_IMC_{core}.png",
            core=get_column_entry_from_metadata(
                wildcards.project_name,
                "core_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "images" in config["QC_metrics"] and "IMC_to_postIMC" in config["QC_steps"]
        ),
        IMC_to_preIMC_plot = lambda wildcards: return_file_or_generic(
        expand(
            "results/{{project_name}}/data/registration_metric/report/{{project_name}}_{sample}_IMC_to_preIMC_plot.png",
            sample = get_column_entry_from_metadata(
                wildcards.project_name,
                "sample_name",
                "project_name",
                read_sample_metadata(config["sample_metadata"]),
                return_all=True,
            ),
        ),
        "images" in config["QC_metrics"] and "IMC_to_postIMC" in config["QC_steps"]
        ),
    output:
        html="results/{project_name}/data/registration_metric/report/{project_name}_registration_evaluation.html",
    log:
        stdout="logs/generate_registration_report/{project_name}.stdout",
    container:
        config["container"]
    script:
        "scripts/QC/visualize_registrations.Rmd"



